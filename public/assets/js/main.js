/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/pako/index.js":
/*!************************************!*\
  !*** ./node_modules/pako/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Top level file is just a mixin of submodules & constants


const { Deflate, deflate, deflateRaw, gzip } = __webpack_require__(/*! ./lib/deflate */ "./node_modules/pako/lib/deflate.js");

const { Inflate, inflate, inflateRaw, ungzip } = __webpack_require__(/*! ./lib/inflate */ "./node_modules/pako/lib/inflate.js");

const constants = __webpack_require__(/*! ./lib/zlib/constants */ "./node_modules/pako/lib/zlib/constants.js");

module.exports.Deflate = Deflate;
module.exports.deflate = deflate;
module.exports.deflateRaw = deflateRaw;
module.exports.gzip = gzip;
module.exports.Inflate = Inflate;
module.exports.inflate = inflate;
module.exports.inflateRaw = inflateRaw;
module.exports.ungzip = ungzip;
module.exports.constants = constants;


/***/ }),

/***/ "./node_modules/pako/lib/deflate.js":
/*!******************************************!*\
  !*** ./node_modules/pako/lib/deflate.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {




const zlib_deflate = __webpack_require__(/*! ./zlib/deflate */ "./node_modules/pako/lib/zlib/deflate.js");
const utils        = __webpack_require__(/*! ./utils/common */ "./node_modules/pako/lib/utils/common.js");
const strings      = __webpack_require__(/*! ./utils/strings */ "./node_modules/pako/lib/utils/strings.js");
const msg          = __webpack_require__(/*! ./zlib/messages */ "./node_modules/pako/lib/zlib/messages.js");
const ZStream      = __webpack_require__(/*! ./zlib/zstream */ "./node_modules/pako/lib/zlib/zstream.js");

const toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH,
  Z_OK, Z_STREAM_END,
  Z_DEFAULT_COMPRESSION,
  Z_DEFAULT_STRATEGY,
  Z_DEFLATED
} = __webpack_require__(/*! ./zlib/constants */ "./node_modules/pako/lib/zlib/constants.js");

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overridden.
 **/

/**
 * Deflate.result -> Uint8Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY
  }, options || {});

  let opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new ZStream();
  this.strm.avail_out = 0;

  let status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    let dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = zlib_deflate.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK) {
      throw new Error(msg[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must
 * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending
 * buffers and call [[Deflate#onEnd]].
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  let status, _flush_mode;

  if (this.ended) { return false; }

  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  for (;;) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    // Make sure avail_out > 6 to avoid repeating markers
    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }

    status = zlib_deflate.deflate(strm, _flush_mode);

    // Ended => flush and finish
    if (status === Z_STREAM_END) {
      if (strm.next_out > 0) {
        this.onData(strm.output.subarray(0, strm.next_out));
      }
      status = zlib_deflate.deflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return status === Z_OK;
    }

    // Flush if out buffer full
    if (strm.avail_out === 0) {
      this.onData(strm.output);
      continue;
    }

    // Flush if requested and has data
    if (_flush_mode > 0 && strm.next_out > 0) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }

    if (strm.avail_in === 0) break;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array): output data.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    this.result = utils.flattenChunks(this.chunks);
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  const deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}


module.exports.Deflate = Deflate;
module.exports.deflate = deflate;
module.exports.deflateRaw = deflateRaw;
module.exports.gzip = gzip;
module.exports.constants = __webpack_require__(/*! ./zlib/constants */ "./node_modules/pako/lib/zlib/constants.js");


/***/ }),

/***/ "./node_modules/pako/lib/inflate.js":
/*!******************************************!*\
  !*** ./node_modules/pako/lib/inflate.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {




const zlib_inflate = __webpack_require__(/*! ./zlib/inflate */ "./node_modules/pako/lib/zlib/inflate.js");
const utils        = __webpack_require__(/*! ./utils/common */ "./node_modules/pako/lib/utils/common.js");
const strings      = __webpack_require__(/*! ./utils/strings */ "./node_modules/pako/lib/utils/strings.js");
const msg          = __webpack_require__(/*! ./zlib/messages */ "./node_modules/pako/lib/zlib/messages.js");
const ZStream      = __webpack_require__(/*! ./zlib/zstream */ "./node_modules/pako/lib/zlib/zstream.js");
const GZheader     = __webpack_require__(/*! ./zlib/gzheader */ "./node_modules/pako/lib/zlib/gzheader.js");

const toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH, Z_FINISH,
  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR
} = __webpack_require__(/*! ./zlib/constants */ "./node_modules/pako/lib/zlib/constants.js");

/* ===========================================================================*/


/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overridden.
 **/

/**
 * Inflate.result -> Uint8Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  this.options = utils.assign({
    chunkSize: 1024 * 64,
    windowBits: 15,
    to: ''
  }, options || {});

  const opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new ZStream();
  this.strm.avail_out = 0;

  let status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  this.header = new GZheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);

  // Setup dictionary
  if (opt.dictionary) {
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      opt.dictionary = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      opt.dictionary = new Uint8Array(opt.dictionary);
    }
    if (opt.raw) { //In raw mode we need to set the dictionary early
      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);
      if (status !== Z_OK) {
        throw new Error(msg[status]);
      }
    }
  }
}

/**
 * Inflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer): input data
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE
 *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,
 *   `true` means Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. If end of stream detected,
 * [[Inflate#onEnd]] will be called.
 *
 * `flush_mode` is not needed for normal operation, because end of stream
 * detected automatically. You may try to use it for advanced things, but
 * this functionality was not tested.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  const dictionary = this.options.dictionary;
  let status, _flush_mode, last_avail_out;

  if (this.ended) return false;

  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;

  // Convert data if needed
  if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  for (;;) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = zlib_inflate.inflate(strm, _flush_mode);

    if (status === Z_NEED_DICT && dictionary) {
      status = zlib_inflate.inflateSetDictionary(strm, dictionary);

      if (status === Z_OK) {
        status = zlib_inflate.inflate(strm, _flush_mode);
      } else if (status === Z_DATA_ERROR) {
        // Replace code with more verbose
        status = Z_NEED_DICT;
      }
    }

    // Skip snyc markers if more data follows and not raw mode
    while (strm.avail_in > 0 &&
           status === Z_STREAM_END &&
           strm.state.wrap > 0 &&
           data[strm.next_in] !== 0)
    {
      zlib_inflate.inflateReset(strm);
      status = zlib_inflate.inflate(strm, _flush_mode);
    }

    switch (status) {
      case Z_STREAM_ERROR:
      case Z_DATA_ERROR:
      case Z_NEED_DICT:
      case Z_MEM_ERROR:
        this.onEnd(status);
        this.ended = true;
        return false;
    }

    // Remember real `avail_out` value, because we may patch out buffer content
    // to align utf8 strings boundaries.
    last_avail_out = strm.avail_out;

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === Z_STREAM_END) {

        if (this.options.to === 'string') {

          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          let tail = strm.next_out - next_out_utf8;
          let utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail & realign counters
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);

          this.onData(utf8str);

        } else {
          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
        }
      }
    }

    // Must repeat iteration if out buffer is full
    if (status === Z_OK && last_avail_out === 0) continue;

    // Finalize if end of stream reached.
    if (status === Z_STREAM_END) {
      status = zlib_inflate.inflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return true;
    }

    if (strm.avail_in === 0) break;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|String): output data. When string output requested,
 *   each chunk will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako');
 * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));
 * let output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err) {
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  const inflator = new Inflate(options);

  inflator.push(input);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) throw inflator.msg || msg[inflator.err];

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


module.exports.Inflate = Inflate;
module.exports.inflate = inflate;
module.exports.inflateRaw = inflateRaw;
module.exports.ungzip = inflate;
module.exports.constants = __webpack_require__(/*! ./zlib/constants */ "./node_modules/pako/lib/zlib/constants.js");


/***/ }),

/***/ "./node_modules/pako/lib/utils/common.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/utils/common.js ***!
  \***********************************************/
/***/ ((module) => {




const _has = (obj, key) => {
  return Object.prototype.hasOwnProperty.call(obj, key);
};

module.exports.assign = function (obj /*from1, from2, from3, ...*/) {
  const sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    const source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (const p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// Join array of chunks to single array.
module.exports.flattenChunks = (chunks) => {
  // calculate data length
  let len = 0;

  for (let i = 0, l = chunks.length; i < l; i++) {
    len += chunks[i].length;
  }

  // join chunks
  const result = new Uint8Array(len);

  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
    let chunk = chunks[i];
    result.set(chunk, pos);
    pos += chunk.length;
  }

  return result;
};


/***/ }),

/***/ "./node_modules/pako/lib/utils/strings.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/utils/strings.js ***!
  \************************************************/
/***/ ((module) => {

// String encode/decode helpers



// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safari
//
let STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
const _utf8len = new Uint8Array(256);
for (let q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
module.exports.string2buf = (str) => {
  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {
    return new TextEncoder().encode(str);
  }

  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new Uint8Array(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper
const buf2binstring = (buf, len) => {
  // On Chrome, the arguments in a function call that are allowed is `65534`.
  // If the length of the buffer is smaller than that, we can use this optimization,
  // otherwise we will take a slower path.
  if (len < 65534) {
    if (buf.subarray && STR_APPLY_UIA_OK) {
      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
    }
  }

  let result = '';
  for (let i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
};


// convert array to string
module.exports.buf2string = (buf, max) => {
  const len = max || buf.length;

  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {
    return new TextDecoder().decode(buf.subarray(0, max));
  }

  let i, out;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  const utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    let c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    let c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
module.exports.utf8border = (buf, max) => {

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  let pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means buffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};


/***/ }),

/***/ "./node_modules/pako/lib/zlib/adler32.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/adler32.js ***!
  \***********************************************/
/***/ ((module) => {



// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const adler32 = (adler, buf, len, pos) => {
  let s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
};


module.exports = adler32;


/***/ }),

/***/ "./node_modules/pako/lib/zlib/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/pako/lib/zlib/constants.js ***!
  \*************************************************/
/***/ ((module) => {



// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  Z_MEM_ERROR:       -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};


/***/ }),

/***/ "./node_modules/pako/lib/zlib/crc32.js":
/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/crc32.js ***!
  \*********************************************/
/***/ ((module) => {



// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
const makeTable = () => {
  let c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
};

// Create table on load. Just 255 signed longs. Not a problem.
const crcTable = new Uint32Array(makeTable());


const crc32 = (crc, buf, len, pos) => {
  const t = crcTable;
  const end = pos + len;

  crc ^= -1;

  for (let i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
};


module.exports = crc32;


/***/ }),

/***/ "./node_modules/pako/lib/zlib/deflate.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/deflate.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = __webpack_require__(/*! ./trees */ "./node_modules/pako/lib/zlib/trees.js");
const adler32 = __webpack_require__(/*! ./adler32 */ "./node_modules/pako/lib/zlib/adler32.js");
const crc32   = __webpack_require__(/*! ./crc32 */ "./node_modules/pako/lib/zlib/crc32.js");
const msg     = __webpack_require__(/*! ./messages */ "./node_modules/pako/lib/zlib/messages.js");

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_BLOCK,
  Z_OK, Z_STREAM_END, Z_STREAM_ERROR, Z_DATA_ERROR, Z_BUF_ERROR,
  Z_DEFAULT_COMPRESSION,
  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY,
  Z_UNKNOWN,
  Z_DEFLATED
} = __webpack_require__(/*! ./constants */ "./node_modules/pako/lib/zlib/constants.js");

/*============================================================================*/


const MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
const MAX_WBITS = 15;
/* 32K LZ77 window */
const DEF_MEM_LEVEL = 8;


const LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
const LITERALS      = 256;
/* number of literal bytes 0..255 */
const L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
const D_CODES       = 30;
/* number of distance codes */
const BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
const HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
const MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

const MIN_MATCH = 3;
const MAX_MATCH = 258;
const MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

const PRESET_DICT = 0x20;

const INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */
//#ifdef GZIP
const GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */
//#endif
const EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */
const NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */
const COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */
const HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */
const BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */
const FINISH_STATE  = 666;    /* stream complete */

const BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
const BS_BLOCK_DONE     = 2; /* block flush performed */
const BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
const BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

const OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

const err = (strm, errorCode) => {
  strm.msg = msg[errorCode];
  return errorCode;
};

const rank = (f) => {
  return ((f) * 2) - ((f) > 4 ? 9 : 0);
};

const zero = (buf) => {
  let len = buf.length; while (--len >= 0) { buf[len] = 0; }
};

/* ===========================================================================
 * Slide the hash table when sliding the window down (could be avoided with 32
 * bit values at the expense of memory usage). We slide even when level == 0 to
 * keep the hash table consistent if we switch back to level > 0 later.
 */
const slide_hash = (s) => {
  let n, m;
  let p;
  let wsize = s.w_size;

  n = s.hash_size;
  p = n;
  do {
    m = s.head[--p];
    s.head[p] = (m >= wsize ? m - wsize : 0);
  } while (--n);
  n = wsize;
//#ifndef FASTEST
  p = n;
  do {
    m = s.prev[--p];
    s.prev[p] = (m >= wsize ? m - wsize : 0);
    /* If n is not on any hash chain, prev[n] is garbage but
     * its value will never be used.
     */
  } while (--n);
//#endif
};

/* eslint-disable new-cap */
let HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;
// This hash causes less collisions, https://github.com/nodeca/pako/issues/135
// But breaks binary compatibility
//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;
let HASH = HASH_ZLIB;


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output, except for
 * some deflate_stored() output, goes through this function so some
 * applications may wish to modify it to avoid allocating a large
 * strm->next_out buffer and copying into it. (See also read_buf()).
 */
const flush_pending = (strm) => {
  const s = strm.state;

  //_tr_flush_bits(s);
  let len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
  strm.next_out  += len;
  s.pending_out  += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending      -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
};


const flush_block_only = (s, last) => {
  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
};


const put_byte = (s, b) => {
  s.pending_buf[s.pending++] = b;
};


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
const putShortMSB = (s, b) => {

  //  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
};


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
const read_buf = (strm, buf, start, size) => {

  let len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
};


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
const longest_match = (s, cur_match) => {

  let chain_length = s.max_chain_length;      /* max hash chain length */
  let scan = s.strstart; /* current string */
  let match;                       /* matched string */
  let len;                           /* length of current match */
  let best_len = s.prev_length;              /* best match length so far */
  let nice_match = s.nice_match;             /* stop if match long enough */
  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  const _win = s.window; // shortcut

  const wmask = s.w_mask;
  const prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  const strend = s.strstart + MAX_MATCH;
  let scan_end1  = _win[scan + best_len - 1];
  let scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
};


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
const fill_window = (s) => {

  const _w_size = s.w_size;
  let n, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;
      if (s.insert > s.strstart) {
        s.insert = s.strstart;
      }
      slide_hash(s);
      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    const curr = s.strstart + s.lookahead;
//    let init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
};

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 *
 * In case deflateParams() is used to later switch to a non-zero compression
 * level, s->matches (otherwise unused when storing) keeps track of the number
 * of hash table slides to perform. If s->matches is 1, then one hash table
 * slide will be done when switching. If s->matches is 2, the maximum value
 * allowed here, then the hash table will be cleared, since two or more slides
 * is the same as a clear.
 *
 * deflate_stored() is written to minimize the number of times an input byte is
 * copied. It is most efficient with large input and output buffers, which
 * maximizes the opportunites to have a single copy from next_in to next_out.
 */
const deflate_stored = (s, flush) => {

  /* Smallest worthy block size when not flushing or finishing. By default
   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
   * large input and output buffers, the stored block size will be larger.
   */
  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;

  /* Copy as many min_block or larger stored blocks directly to next_out as
   * possible. If flushing, copy the remaining available input to next_out as
   * stored blocks, if there is enough space.
   */
  let len, left, have, last = 0;
  let used = s.strm.avail_in;
  do {
    /* Set len to the maximum size block that we can copy directly with the
     * available input data and output space. Set left to how much of that
     * would be copied from what's left in the window.
     */
    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */
    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */
    if (s.strm.avail_out < have) {         /* need room for header */
      break;
    }
      /* maximum stored block length that will fit in avail_out: */
    have = s.strm.avail_out - have;
    left = s.strstart - s.block_start;  /* bytes left in window */
    if (len > left + s.strm.avail_in) {
      len = left + s.strm.avail_in;   /* limit len to the input */
    }
    if (len > have) {
      len = have;             /* limit len to the output */
    }

    /* If the stored block would be less than min_block in length, or if
     * unable to copy all of the available input when flushing, then try
     * copying to the window and the pending buffer instead. Also don't
     * write an empty block when flushing -- deflate() does that.
     */
    if (len < min_block && ((len === 0 && flush !== Z_FINISH) ||
                        flush === Z_NO_FLUSH ||
                        len !== left + s.strm.avail_in)) {
      break;
    }

    /* Make a dummy stored block in pending to get the header bytes,
     * including any pending bits. This also updates the debugging counts.
     */
    last = flush === Z_FINISH && len === left + s.strm.avail_in ? 1 : 0;
    _tr_stored_block(s, 0, 0, last);

    /* Replace the lengths in the dummy stored block with len. */
    s.pending_buf[s.pending - 4] = len;
    s.pending_buf[s.pending - 3] = len >> 8;
    s.pending_buf[s.pending - 2] = ~len;
    s.pending_buf[s.pending - 1] = ~len >> 8;

    /* Write the stored block header bytes. */
    flush_pending(s.strm);

//#ifdef ZLIB_DEBUG
//    /* Update debugging counts for the data about to be copied. */
//    s->compressed_len += len << 3;
//    s->bits_sent += len << 3;
//#endif

    /* Copy uncompressed bytes from the window to next_out. */
    if (left) {
      if (left > len) {
        left = len;
      }
      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);
      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);
      s.strm.next_out += left;
      s.strm.avail_out -= left;
      s.strm.total_out += left;
      s.block_start += left;
      len -= left;
    }

    /* Copy uncompressed bytes directly from next_in to next_out, updating
     * the check value.
     */
    if (len) {
      read_buf(s.strm, s.strm.output, s.strm.next_out, len);
      s.strm.next_out += len;
      s.strm.avail_out -= len;
      s.strm.total_out += len;
    }
  } while (last === 0);

  /* Update the sliding window with the last s->w_size bytes of the copied
   * data, or append all of the copied data to the existing window if less
   * than s->w_size bytes were copied. Also update the number of bytes to
   * insert in the hash tables, in the event that deflateParams() switches to
   * a non-zero compression level.
   */
  used -= s.strm.avail_in;    /* number of input bytes directly copied */
  if (used) {
    /* If any input was used, then no unused input remains in the window,
     * therefore s->block_start == s->strstart.
     */
    if (used >= s.w_size) {  /* supplant the previous history */
      s.matches = 2;     /* clear hash */
      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);
      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);
      s.strstart = s.w_size;
      s.insert = s.strstart;
    }
    else {
      if (s.window_size - s.strstart <= used) {
        /* Slide the window down. */
        s.strstart -= s.w_size;
        //zmemcpy(s->window, s->window + s->w_size, s->strstart);
        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
        if (s.matches < 2) {
          s.matches++;   /* add a pending slide_hash() */
        }
        if (s.insert > s.strstart) {
          s.insert = s.strstart;
        }
      }
      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);
      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);
      s.strstart += used;
      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;
    }
    s.block_start = s.strstart;
  }
  if (s.high_water < s.strstart) {
    s.high_water = s.strstart;
  }

  /* If the last block was written to next_out, then done. */
  if (last) {
    return BS_FINISH_DONE;
  }

  /* If flushing and all input has been consumed, then done. */
  if (flush !== Z_NO_FLUSH && flush !== Z_FINISH &&
    s.strm.avail_in === 0 && s.strstart === s.block_start) {
    return BS_BLOCK_DONE;
  }

  /* Fill the window with any remaining input. */
  have = s.window_size - s.strstart;
  if (s.strm.avail_in > have && s.block_start >= s.w_size) {
    /* Slide the window down. */
    s.block_start -= s.w_size;
    s.strstart -= s.w_size;
    //zmemcpy(s->window, s->window + s->w_size, s->strstart);
    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
    if (s.matches < 2) {
      s.matches++;       /* add a pending slide_hash() */
    }
    have += s.w_size;      /* more space now */
    if (s.insert > s.strstart) {
      s.insert = s.strstart;
    }
  }
  if (have > s.strm.avail_in) {
    have = s.strm.avail_in;
  }
  if (have) {
    read_buf(s.strm, s.window, s.strstart, have);
    s.strstart += have;
    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;
  }
  if (s.high_water < s.strstart) {
    s.high_water = s.strstart;
  }

  /* There was not enough avail_out to write a complete worthy or flushed
   * stored block to next_out. Write a stored block to pending instead, if we
   * have enough input for a worthy block, or if flushing and there is enough
   * room for the remaining input as a stored block in the pending buffer.
   */
  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */
    /* maximum stored block length that will fit in pending: */
  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;
  min_block = have > s.w_size ? s.w_size : have;
  left = s.strstart - s.block_start;
  if (left >= min_block ||
     ((left || flush === Z_FINISH) && flush !== Z_NO_FLUSH &&
     s.strm.avail_in === 0 && left <= have)) {
    len = left > have ? have : left;
    last = flush === Z_FINISH && s.strm.avail_in === 0 &&
         len === left ? 1 : 0;
    _tr_stored_block(s, s.block_start, len, last);
    s.block_start += len;
    flush_pending(s.strm);
  }

  /* We've done all we can with the available input and output. */
  return last ? BS_FINISH_STARTED : BS_NEED_MORE;
};


/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
const deflate_fast = (s, flush) => {

  let hash_head;        /* head of the hash chain */
  let bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
const deflate_slow = (s, flush) => {

  let hash_head;          /* head of hash chain */
  let bflush;              /* set if current block must be flushed */

  let max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
};


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
const deflate_rle = (s, flush) => {

  let bflush;            /* set if current block must be flushed */
  let prev;              /* byte at distance one to match */
  let scan, strend;      /* scan goes up to strend for length of run */

  const _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
const deflate_huff = (s, flush) => {

  let bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = _tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {

  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

const configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
const lm_init = (s) => {

  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
};


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);
  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);
  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new Uint16Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.sym_buf = 0;        /* buffer for distances and literals/lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.sym_next = 0;      /* running index in sym_buf */
  this.sym_end = 0;       /* symbol table full when sym_next reaches this */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


/* =========================================================================
 * Check for a valid deflate stream state. Return 0 if ok, 1 if not.
 */
const deflateStateCheck = (strm) => {

  if (!strm) {
    return 1;
  }
  const s = strm.state;
  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&
//#ifdef GZIP
                                s.status !== GZIP_STATE &&
//#endif
                                s.status !== EXTRA_STATE &&
                                s.status !== NAME_STATE &&
                                s.status !== COMMENT_STATE &&
                                s.status !== HCRC_STATE &&
                                s.status !== BUSY_STATE &&
                                s.status !== FINISH_STATE)) {
    return 1;
  }
  return 0;
};


const deflateResetKeep = (strm) => {

  if (deflateStateCheck(strm)) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  const s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status =
//#ifdef GZIP
    s.wrap === 2 ? GZIP_STATE :
//#endif
    s.wrap ? INIT_STATE : BUSY_STATE;
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = -2;
  _tr_init(s);
  return Z_OK;
};


const deflateReset = (strm) => {

  const ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
};


const deflateSetHeader = (strm, head) => {

  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {
    return Z_STREAM_ERROR;
  }
  strm.state.gzhead = head;
  return Z_OK;
};


const deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {

  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  let wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  const s = new DeflateState();

  strm.state = s;
  s.strm = strm;
  s.status = INIT_STATE;     /* to pass state test in deflateReset() */

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new Uint8Array(s.w_size * 2);
  s.head = new Uint16Array(s.hash_size);
  s.prev = new Uint16Array(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  /* We overlay pending_buf and sym_buf. This works since the average size
   * for length/distance pairs over any compressed block is assured to be 31
   * bits or less.
   *
   * Analysis: The longest fixed codes are a length code of 8 bits plus 5
   * extra bits, for lengths 131 to 257. The longest fixed distance codes are
   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest
   * possible fixed-codes length/distance pair is then 31 bits total.
   *
   * sym_buf starts one-fourth of the way into pending_buf. So there are
   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol
   * in sym_buf is three bytes -- two for the distance and one for the
   * literal/length. As each symbol is consumed, the pointer to the next
   * sym_buf value to read moves forward three bytes. From that symbol, up to
   * 31 bits are written to pending_buf. The closest the written pending_buf
   * bits gets to the next sym_buf symbol to read is just before the last
   * code is written. At that time, 31*(n-2) bits have been written, just
   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at
   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1
   * symbols are written.) The closest the writing gets to what is unread is
   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and
   * can range from 128 to 32768.
   *
   * Therefore, at a minimum, there are 142 bits of space between what is
   * written and what is read in the overlain buffers, so the symbols cannot
   * be overwritten by the compressed data. That space is actually 139 bits,
   * due to the three-bit fixed-code block header.
   *
   * That covers the case where either Z_FIXED is specified, forcing fixed
   * codes, or when the use of fixed codes is chosen, because that choice
   * results in a smaller compressed block than dynamic codes. That latter
   * condition then assures that the above analysis also covers all dynamic
   * blocks. A dynamic-code block will only be chosen to be emitted if it has
   * fewer bits than a fixed-code block would for the same set of symbols.
   * Therefore its average symbol length is assured to be less than 31. So
   * the compressed data for a dynamic block also cannot overwrite the
   * symbols from which it is being constructed.
   */

  s.pending_buf_size = s.lit_bufsize * 4;
  s.pending_buf = new Uint8Array(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->sym_buf = s->pending_buf + s->lit_bufsize;
  s.sym_buf = s.lit_bufsize;

  //s->sym_end = (s->lit_bufsize - 1) * 3;
  s.sym_end = (s.lit_bufsize - 1) * 3;
  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
};

const deflateInit = (strm, level) => {

  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
};


/* ========================================================================= */
const deflate = (strm, flush) => {

  if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  const s = strm.state;

  if (!strm.output ||
      (strm.avail_in !== 0 && !strm.input) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  const old_flush = s.last_flush;
  s.last_flush = flush;

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Write the header */
  if (s.status === INIT_STATE && s.wrap === 0) {
    s.status = BUSY_STATE;
  }
  if (s.status === INIT_STATE) {
    /* zlib header */
    let header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
    let level_flags = -1;

    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
      level_flags = 0;
    } else if (s.level < 6) {
      level_flags = 1;
    } else if (s.level === 6) {
      level_flags = 2;
    } else {
      level_flags = 3;
    }
    header |= (level_flags << 6);
    if (s.strstart !== 0) { header |= PRESET_DICT; }
    header += 31 - (header % 31);

    putShortMSB(s, header);

    /* Save the adler32 of the preset dictionary: */
    if (s.strstart !== 0) {
      putShortMSB(s, strm.adler >>> 16);
      putShortMSB(s, strm.adler & 0xffff);
    }
    strm.adler = 1; // adler32(0L, Z_NULL, 0);
    s.status = BUSY_STATE;

    /* Compression must start with an empty pending buffer */
    flush_pending(strm);
    if (s.pending !== 0) {
      s.last_flush = -1;
      return Z_OK;
    }
  }
//#ifdef GZIP
  if (s.status === GZIP_STATE) {
    /* gzip header */
    strm.adler = 0;  //crc32(0L, Z_NULL, 0);
    put_byte(s, 31);
    put_byte(s, 139);
    put_byte(s, 8);
    if (!s.gzhead) { // s->gzhead == Z_NULL
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, s.level === 9 ? 2 :
                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                   4 : 0));
      put_byte(s, OS_CODE);
      s.status = BUSY_STATE;

      /* Compression must start with an empty pending buffer */
      flush_pending(strm);
      if (s.pending !== 0) {
        s.last_flush = -1;
        return Z_OK;
      }
    }
    else {
      put_byte(s, (s.gzhead.text ? 1 : 0) +
                  (s.gzhead.hcrc ? 2 : 0) +
                  (!s.gzhead.extra ? 0 : 4) +
                  (!s.gzhead.name ? 0 : 8) +
                  (!s.gzhead.comment ? 0 : 16)
      );
      put_byte(s, s.gzhead.time & 0xff);
      put_byte(s, (s.gzhead.time >> 8) & 0xff);
      put_byte(s, (s.gzhead.time >> 16) & 0xff);
      put_byte(s, (s.gzhead.time >> 24) & 0xff);
      put_byte(s, s.level === 9 ? 2 :
                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                   4 : 0));
      put_byte(s, s.gzhead.os & 0xff);
      if (s.gzhead.extra && s.gzhead.extra.length) {
        put_byte(s, s.gzhead.extra.length & 0xff);
        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
      }
      if (s.gzhead.hcrc) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
      }
      s.gzindex = 0;
      s.status = EXTRA_STATE;
    }
  }
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      let beg = s.pending;   /* start of bytes to update crc */
      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;
      while (s.pending + left > s.pending_buf_size) {
        let copy = s.pending_buf_size - s.pending;
        // zmemcpy(s.pending_buf + s.pending,
        //    s.gzhead.extra + s.gzindex, copy);
        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);
        s.pending = s.pending_buf_size;
        //--- HCRC_UPDATE(beg) ---//
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        //---//
        s.gzindex += copy;
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK;
        }
        beg = 0;
        left -= copy;
      }
      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility
      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11
      let gzhead_extra = new Uint8Array(s.gzhead.extra);
      // zmemcpy(s->pending_buf + s->pending,
      //     s->gzhead->extra + s->gzindex, left);
      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);
      s.pending += left;
      //--- HCRC_UPDATE(beg) ---//
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      //---//
      s.gzindex = 0;
    }
    s.status = NAME_STATE;
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      let beg = s.pending;   /* start of bytes to update crc */
      let val;
      do {
        if (s.pending === s.pending_buf_size) {
          //--- HCRC_UPDATE(beg) ---//
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          //---//
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK;
          }
          beg = 0;
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      //--- HCRC_UPDATE(beg) ---//
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      //---//
      s.gzindex = 0;
    }
    s.status = COMMENT_STATE;
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      let beg = s.pending;   /* start of bytes to update crc */
      let val;
      do {
        if (s.pending === s.pending_buf_size) {
          //--- HCRC_UPDATE(beg) ---//
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          //---//
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK;
          }
          beg = 0;
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      //--- HCRC_UPDATE(beg) ---//
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      //---//
    }
    s.status = HCRC_STATE;
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK;
        }
      }
      put_byte(s, strm.adler & 0xff);
      put_byte(s, (strm.adler >> 8) & 0xff);
      strm.adler = 0; //crc32(0L, Z_NULL, 0);
    }
    s.status = BUSY_STATE;

    /* Compression must start with an empty pending buffer */
    flush_pending(strm);
    if (s.pending !== 0) {
      s.last_flush = -1;
      return Z_OK;
    }
  }
//#endif

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    let bstate = s.level === 0 ? deflate_stored(s, flush) :
                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
                 s.strategy === Z_RLE ? deflate_rle(s, flush) :
                 configuration_table[s.level].func(s, flush);

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        _tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        _tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
};


const deflateEnd = (strm) => {

  if (deflateStateCheck(strm)) {
    return Z_STREAM_ERROR;
  }

  const status = strm.state.status;

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
};


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
const deflateSetDictionary = (strm, dictionary) => {

  let dictLength = dictionary.length;

  if (deflateStateCheck(strm)) {
    return Z_STREAM_ERROR;
  }

  const s = strm.state;
  const wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    let tmpDict = new Uint8Array(s.w_size);
    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  const avail = strm.avail_in;
  const next = strm.next_in;
  const input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    let str = s.strstart;
    let n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
};


module.exports.deflateInit = deflateInit;
module.exports.deflateInit2 = deflateInit2;
module.exports.deflateReset = deflateReset;
module.exports.deflateResetKeep = deflateResetKeep;
module.exports.deflateSetHeader = deflateSetHeader;
module.exports.deflate = deflate;
module.exports.deflateEnd = deflateEnd;
module.exports.deflateSetDictionary = deflateSetDictionary;
module.exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
module.exports.deflateBound = deflateBound;
module.exports.deflateCopy = deflateCopy;
module.exports.deflateGetDictionary = deflateGetDictionary;
module.exports.deflateParams = deflateParams;
module.exports.deflatePending = deflatePending;
module.exports.deflatePrime = deflatePrime;
module.exports.deflateTune = deflateTune;
*/


/***/ }),

/***/ "./node_modules/pako/lib/zlib/gzheader.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/gzheader.js ***!
  \************************************************/
/***/ ((module) => {



// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

module.exports = GZheader;


/***/ }),

/***/ "./node_modules/pako/lib/zlib/inffast.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inffast.js ***!
  \***********************************************/
/***/ ((module) => {



// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
const BAD = 16209;       /* got a data error -- remain here until reset */
const TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  let _in;                    /* local strm.input */
  let last;                   /* have enough input while in < last */
  let _out;                   /* local strm.output */
  let beg;                    /* inflate()'s initial strm.output */
  let end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  let dmax;                   /* maximum distance from zlib header */
//#endif
  let wsize;                  /* window size or zero if not using window */
  let whave;                  /* valid bytes in the window */
  let wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  let s_window;               /* allocated sliding window, if wsize != 0 */
  let hold;                   /* local strm.hold */
  let bits;                   /* local strm.bits */
  let lcode;                  /* local strm.lencode */
  let dcode;                  /* local strm.distcode */
  let lmask;                  /* mask for first level of length codes */
  let dmask;                  /* mask for first level of distance codes */
  let here;                   /* retrieved table entry */
  let op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  let len;                    /* match length, unused bytes */
  let dist;                   /* match distance */
  let from;                   /* where to copy match from */
  let from_source;


  let input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  const state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};


/***/ }),

/***/ "./node_modules/pako/lib/zlib/inflate.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inflate.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const adler32       = __webpack_require__(/*! ./adler32 */ "./node_modules/pako/lib/zlib/adler32.js");
const crc32         = __webpack_require__(/*! ./crc32 */ "./node_modules/pako/lib/zlib/crc32.js");
const inflate_fast  = __webpack_require__(/*! ./inffast */ "./node_modules/pako/lib/zlib/inffast.js");
const inflate_table = __webpack_require__(/*! ./inftrees */ "./node_modules/pako/lib/zlib/inftrees.js");

const CODES = 0;
const LENS = 1;
const DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_FINISH, Z_BLOCK, Z_TREES,
  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR, Z_BUF_ERROR,
  Z_DEFLATED
} = __webpack_require__(/*! ./constants */ "./node_modules/pako/lib/zlib/constants.js");


/* STATES ====================================================================*/
/* ===========================================================================*/


const    HEAD = 16180;       /* i: waiting for magic header */
const    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */
const    TIME = 16182;       /* i: waiting for modification time (gzip) */
const    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */
const    EXLEN = 16184;      /* i: waiting for extra length (gzip) */
const    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */
const    NAME = 16186;       /* i: waiting for end of file name (gzip) */
const    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */
const    HCRC = 16188;       /* i: waiting for header crc (gzip) */
const    DICTID = 16189;    /* i: waiting for dictionary check value */
const    DICT = 16190;      /* waiting for inflateSetDictionary() call */
const        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */
const        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */
const        STORED = 16193;    /* i: waiting for stored size (length and complement) */
const        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */
const        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */
const        TABLE = 16196;     /* i: waiting for dynamic block table lengths */
const        LENLENS = 16197;   /* i: waiting for code length code lengths */
const        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */
const            LEN_ = 16199;      /* i: same as LEN below, but only first time in */
const            LEN = 16200;       /* i: waiting for length/lit/eob code */
const            LENEXT = 16201;    /* i: waiting for length extra bits */
const            DIST = 16202;      /* i: waiting for distance code */
const            DISTEXT = 16203;   /* i: waiting for distance extra bits */
const            MATCH = 16204;     /* o: waiting for output space to copy string */
const            LIT = 16205;       /* o: waiting for output space to write literal */
const    CHECK = 16206;     /* i: waiting for 32-bit check value */
const    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */
const    DONE = 16208;      /* finished check, done -- remain here until reset */
const    BAD = 16209;       /* got a data error -- remain here until reset */
const    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */
const    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



const ENOUGH_LENS = 852;
const ENOUGH_DISTS = 592;
//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

const MAX_WBITS = 15;
/* 32K LZ77 window */
const DEF_WBITS = MAX_WBITS;


const zswap32 = (q) => {

  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
};


function InflateState() {
  this.strm = null;           /* pointer back to this zlib stream */
  this.mode = 0;              /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,
                                 bit 2 true to validate check value */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib), or
                                 -1 if raw or no header yet */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new Uint16Array(320); /* temporary storage for code lengths */
  this.work = new Uint16Array(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}


const inflateStateCheck = (strm) => {

  if (!strm) {
    return 1;
  }
  const state = strm.state;
  if (!state || state.strm !== strm ||
    state.mode < HEAD || state.mode > SYNC) {
    return 1;
  }
  return 0;
};


const inflateResetKeep = (strm) => {

  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }
  const state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.flags = -1;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
};


const inflateReset = (strm) => {

  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }
  const state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

};


const inflateReset2 = (strm, windowBits) => {
  let wrap;

  /* get the state */
  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }
  const state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 5;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
};


const inflateInit2 = (strm, windowBits) => {

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  const state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.strm = strm;
  state.window = null/*Z_NULL*/;
  state.mode = HEAD;     /* to pass state test in inflateReset2() */
  const ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
};


const inflateInit = (strm) => {

  return inflateInit2(strm, DEF_WBITS);
};


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
let virgin = true;

let lenfix, distfix; // We have no pointers in JS, so keep tables separate


const fixedtables = (state) => {

  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    lenfix = new Int32Array(512);
    distfix = new Int32Array(32);

    /* literal/length table */
    let sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
};


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
const updatewindow = (strm, src, end, copy) => {

  let dist;
  const state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new Uint8Array(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    state.window.set(src.subarray(end - state.wsize, end), 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      state.window.set(src.subarray(end - copy, end), 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
};


const inflate = (strm, flush) => {

  let state;
  let input, output;          // input/output buffers
  let next;                   /* next input INDEX */
  let put;                    /* next output INDEX */
  let have, left;             /* available input and output */
  let hold;                   /* bit buffer */
  let bits;                   /* bits in bit buffer */
  let _in, _out;              /* save starting available input and output */
  let copy;                   /* number of stored or match bytes to copy */
  let from;                   /* where to copy match bytes from */
  let from_source;
  let here = 0;               /* current decoding table entry */
  let here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //let last;                   /* parent table entry */
  let last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  let len;                    /* length to copy for repeats, bits to drop */
  let ret;                    /* return code */
  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */
  let opts;

  let n; // temporary variable for NEED_BITS

  const order = /* permutation of code lengths */
    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);


  if (inflateStateCheck(strm) || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          if (state.wbits === 0) {
            state.wbits = 15;
          }
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        if (len > 15 || len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }

        // !!! pako patch. Force use `options.windowBits` if passed.
        // Required to always use max window size by default.
        state.dmax = 1 << state.wbits;
        //state.dmax = 1 << len;

        state.flags = 0;               /* indicate zlib header */
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if ((state.flags & 0x0200) && (state.wrap & 4)) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if ((state.flags & 0x0200) && (state.wrap & 4)) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if ((state.flags & 0x0200) && (state.wrap & 4)) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if ((state.flags & 0x0200) && (state.wrap & 4)) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Uint8Array(state.head.extra_len);
              }
              state.head.extra.set(
                input.subarray(
                  next,
                  // extra field is limited to 65536 bytes
                  // - no need for additional size check
                  next + copy
                ),
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if ((state.flags & 0x0200) && (state.wrap & 4)) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if ((state.flags & 0x0200) && (state.wrap & 4)) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if ((state.flags & 0x0200) && (state.wrap & 4)) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          output.set(input.subarray(next, next + copy), put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
//#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inflate_fast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
//#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if ((state.wrap & 4) && _out) {
            strm.adler = state.check =
                /*UPDATE_CHECK(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if ((state.wrap & 4) && _out) {
    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
};


const inflateEnd = (strm) => {

  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR;
  }

  let state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
};


const inflateGetHeader = (strm, head) => {

  /* check state */
  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }
  const state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
};


const inflateSetDictionary = (strm, dictionary) => {
  const dictLength = dictionary.length;

  let state;
  let dictid;
  let ret;

  /* check state */
  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
};


module.exports.inflateReset = inflateReset;
module.exports.inflateReset2 = inflateReset2;
module.exports.inflateResetKeep = inflateResetKeep;
module.exports.inflateInit = inflateInit;
module.exports.inflateInit2 = inflateInit2;
module.exports.inflate = inflate;
module.exports.inflateEnd = inflateEnd;
module.exports.inflateGetHeader = inflateGetHeader;
module.exports.inflateSetDictionary = inflateSetDictionary;
module.exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
module.exports.inflateCodesUsed = inflateCodesUsed;
module.exports.inflateCopy = inflateCopy;
module.exports.inflateGetDictionary = inflateGetDictionary;
module.exports.inflateMark = inflateMark;
module.exports.inflatePrime = inflatePrime;
module.exports.inflateSync = inflateSync;
module.exports.inflateSyncPoint = inflateSyncPoint;
module.exports.inflateUndermine = inflateUndermine;
module.exports.inflateValidate = inflateValidate;
*/


/***/ }),

/***/ "./node_modules/pako/lib/zlib/inftrees.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/inftrees.js ***!
  \************************************************/
/***/ ((module) => {



// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const MAXBITS = 15;
const ENOUGH_LENS = 852;
const ENOUGH_DISTS = 592;
//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

const CODES = 0;
const LENS = 1;
const DISTS = 2;

const lbase = new Uint16Array([ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
]);

const lext = new Uint8Array([ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
]);

const dbase = new Uint16Array([ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
]);

const dext = new Uint8Array([ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
]);

const inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>
{
  const bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  let len = 0;               /* a code's length in bits */
  let sym = 0;               /* index of code symbols */
  let min = 0, max = 0;          /* minimum and maximum code lengths */
  let root = 0;              /* number of index bits for root table */
  let curr = 0;              /* number of index bits for current table */
  let drop = 0;              /* code bits to drop for sub-table */
  let left = 0;                   /* number of prefix codes available */
  let used = 0;              /* code entries in table used */
  let huff = 0;              /* Huffman code */
  let incr;              /* for incrementing code, index */
  let fill;              /* index for replicating entries */
  let low;               /* low bits for current root entry */
  let mask;              /* mask for low root bits */
  let next;             /* next available space in table */
  let base = null;     /* base value table to use */
//  let shoextra;    /* extra bits table to use */
  let match;                  /* use base and extra for symbol >= match */
  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  let extra = null;

  let here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    match = 20;

  } else if (type === LENS) {
    base = lbase;
    extra = lext;
    match = 257;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    match = 0;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] + 1 < match) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] >= match) {
      here_op = extra[work[sym] - match];
      here_val = base[work[sym] - match];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};


module.exports = inflate_table;


/***/ }),

/***/ "./node_modules/pako/lib/zlib/messages.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/messages.js ***!
  \************************************************/
/***/ ((module) => {



// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};


/***/ }),

/***/ "./node_modules/pako/lib/zlib/trees.js":
/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/trees.js ***!
  \*********************************************/
/***/ ((module) => {



// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

/* Public constants ==========================================================*/
/* ===========================================================================*/


//const Z_FILTERED          = 1;
//const Z_HUFFMAN_ONLY      = 2;
//const Z_RLE               = 3;
const Z_FIXED               = 4;
//const Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
const Z_BINARY              = 0;
const Z_TEXT                = 1;
//const Z_ASCII             = 1; // = Z_TEXT
const Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

const STORED_BLOCK = 0;
const STATIC_TREES = 1;
const DYN_TREES    = 2;
/* The three kinds of block type */

const MIN_MATCH    = 3;
const MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

const LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

const LITERALS      = 256;
/* number of literal bytes 0..255 */

const L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

const D_CODES       = 30;
/* number of distance codes */

const BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

const HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

const MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

const Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

const MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

const END_BLOCK   = 256;
/* end of block literal code */

const REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

const REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

const REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
const extra_lbits =   /* extra bits for each length code */
  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);

const extra_dbits =   /* extra bits for each distance code */
  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);

const extra_blbits =  /* extra bits for each bit length code */
  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);

const bl_order =
  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

const DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
const static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

const static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

const _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

const _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

const base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

const base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


let static_l_desc;
let static_d_desc;
let static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



const d_code = (dist) => {

  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
};


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
const put_short = (s, w) => {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
};


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
const send_bits = (s, value, length) => {

  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
};


const send_code = (s, c, tree) => {

  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
};


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
const bi_reverse = (code, len) => {

  let res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
};


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
const bi_flush = (s) => {

  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
};


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
const gen_bitlen = (s, desc) => {
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */

  const tree            = desc.dyn_tree;
  const max_code        = desc.max_code;
  const stree           = desc.stat_desc.static_tree;
  const has_stree       = desc.stat_desc.has_stree;
  const extra           = desc.stat_desc.extra_bits;
  const base            = desc.stat_desc.extra_base;
  const max_length      = desc.stat_desc.max_length;
  let h;              /* heap index */
  let n, m;           /* iterate over the tree elements */
  let bits;           /* bit length */
  let xbits;          /* extra bits */
  let f;              /* frequency */
  let overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Tracev((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Tracev((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
};


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
const gen_codes = (tree, max_code, bl_count) => {
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */

  const next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  let code = 0;              /* running code value */
  let bits;                  /* bit index */
  let n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    code = (code + bl_count[bits - 1]) << 1;
    next_code[bits] = code;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    let len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
};


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
const tr_static_init = () => {

  let n;        /* iterates over tree elements */
  let bits;     /* bit counter */
  let length;   /* length value */
  let code;     /* code value */
  let dist;     /* distance index */
  const bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
};


/* ===========================================================================
 * Initialize a new block.
 */
const init_block = (s) => {

  let n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.sym_next = s.matches = 0;
};


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
const bi_windup = (s) =>
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
};

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
const smaller = (tree, n, m, depth) => {

  const _n2 = n * 2;
  const _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
};

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
const pqdownheap = (s, tree, k) => {
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */

  const v = s.heap[k];
  let j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
};


// inlined manually
// const SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
const compress_block = (s, ltree, dtree) => {
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */

  let dist;           /* distance of matched string */
  let lc;             /* match length or unmatched char (if dist == 0) */
  let sx = 0;         /* running index in sym_buf */
  let code;           /* the code to send */
  let extra;          /* number of extra bits to send */

  if (s.sym_next !== 0) {
    do {
      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;
      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;
      lc = s.pending_buf[s.sym_buf + sx++];
      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and sym_buf is ok: */
      //Assert(s->pending < s->lit_bufsize + sx, "pendingBuf overflow");

    } while (sx < s.sym_next);
  }

  send_code(s, END_BLOCK, ltree);
};


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
const build_tree = (s, desc) => {
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */

  const tree     = desc.dyn_tree;
  const stree    = desc.stat_desc.static_tree;
  const has_stree = desc.stat_desc.has_stree;
  const elems    = desc.stat_desc.elems;
  let n, m;          /* iterate over heap elements */
  let max_code = -1; /* largest code with non zero frequency */
  let node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
};


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
const scan_tree = (s, tree, max_code) => {
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */

  let n;                     /* iterates over all tree elements */
  let prevlen = -1;          /* last emitted length */
  let curlen;                /* length of current code */

  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  let count = 0;             /* repeat count of the current code */
  let max_count = 7;         /* max repeat count */
  let min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
const send_tree = (s, tree, max_code) => {
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */

  let n;                     /* iterates over all tree elements */
  let prevlen = -1;          /* last emitted length */
  let curlen;                /* length of current code */

  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  let count = 0;             /* repeat count of the current code */
  let max_count = 7;         /* max repeat count */
  let min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
const build_bl_tree = (s) => {

  let max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
};


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
const send_all_trees = (s, lcodes, dcodes, blcodes) => {
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */

  let rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
};


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "block list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "allow list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
const detect_data_type = (s) => {
  /* block_mask is the bit mask of block-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  let block_mask = 0xf3ffc07f;
  let n;

  /* Check for non-textual ("block-listed") bytes. */
  for (n = 0; n <= 31; n++, block_mask >>>= 1) {
    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("allow-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "block-listed" or "allow-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
};


let static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
const _tr_init = (s) =>
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
};


/* ===========================================================================
 * Send a stored block
 */
const _tr_stored_block = (s, buf, stored_len, last) => {
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */

  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  bi_windup(s);        /* align on byte boundary */
  put_short(s, stored_len);
  put_short(s, ~stored_len);
  if (stored_len) {
    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);
  }
  s.pending += stored_len;
};


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
const _tr_align = (s) => {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
};


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and write out the encoded block.
 */
const _tr_flush_block = (s, buf, stored_len, last) => {
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */

  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  let max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->sym_next / 3));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
};

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
const _tr_tally = (s, dist, lc) => {
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */

  s.pending_buf[s.sym_buf + s.sym_next++] = dist;
  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;
  s.pending_buf[s.sym_buf + s.sym_next++] = lc;
  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

  return (s.sym_next === s.sym_end);
};

module.exports._tr_init  = _tr_init;
module.exports._tr_stored_block = _tr_stored_block;
module.exports._tr_flush_block  = _tr_flush_block;
module.exports._tr_tally = _tr_tally;
module.exports._tr_align = _tr_align;


/***/ }),

/***/ "./node_modules/pako/lib/zlib/zstream.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/zstream.js ***!
  \***********************************************/
/***/ ((module) => {



// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;


/***/ }),

/***/ "./client/Config/Config.ts":
/*!*********************************!*\
  !*** ./client/Config/Config.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = {
    NAME: "NodeBall",
    SERVER_HOST: "127.0.0.1",
    SERVER_PORT: 8090,
    SERVER_UPDATE_INTERVAL: 60
};


/***/ }),

/***/ "./client/Config/Resources.ts":
/*!************************************!*\
  !*** ./client/Config/Resources.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Resources = void 0;
exports.Resources = {
    // AUDIO
    KICK: "kick.wav",
    JOIN: "join.wav",
    LEAVE: "leave.wav",
    HIGHLIGHT: "highlight.wav",
    CROWD: "crowd.wav",
    CHAT: "chat.wav",
    GOAL: "goal.wav",
    NOTIF: "notif.mp3",
    // IMAGES
    TILE_GRASS: "grass.png",
    TILE_HOCKEY: "hockey.png",
    AVATAR_1: "avatars/1.svg",
    AVATAR_2: "avatars/2.svg",
    AVATAR_3: "avatars/3.svg",
    AVATAR_4: "avatars/4.svg",
    AVATAR_5: "avatars/5.svg",
    AVATAR_6: "avatars/6.svg",
    AVATAR_7: "avatars/7.svg",
    AVATAR_8: "avatars/8.svg",
    AVATAR_9: "avatars/9.svg",
    AVATAR_10: "avatars/10.svg",
    AVATAR_11: "avatars/11.svg",
    AVATAR_12: "avatars/12.svg",
    AVATAR_13: "avatars/13.svg",
    AVATAR_14: "avatars/14.svg",
    AVATAR_15: "avatars/15.svg",
    AVATAR_16: "avatars/16.svg",
    AVATAR_17: "avatars/17.svg",
    AVATAR_18: "avatars/18.svg",
    AVATAR_19: "avatars/19.svg",
    AVATAR_20: "avatars/20.svg",
    AVATAR_21: "avatars/21.svg",
    AVATAR_22: "avatars/22.svg",
    AVATAR_23: "avatars/23.svg",
    AVATAR_24: "avatars/24.svg",
    AVATAR_25: "avatars/25.svg",
    AVATAR_26: "avatars/26.svg",
    AVATAR_27: "avatars/27.svg",
    AVATAR_28: "avatars/28.svg",
    AVATAR_29: "avatars/29.svg",
    AVATAR_30: "avatars/30.svg",
    AVATAR_31: "avatars/31.svg",
    AVATAR_32: "avatars/32.svg",
    AVATAR_33: "avatars/33.svg",
    AVATAR_34: "avatars/34.svg",
    AVATAR_35: "avatars/35.svg",
    AVATAR_36: "avatars/36.svg",
    AVATAR_37: "avatars/37.svg",
    AVATAR_38: "avatars/38.svg",
    AVATAR_39: "avatars/39.svg",
    AVATAR_40: "avatars/40.svg",
    AVATAR_41: "avatars/41.svg",
    AVATAR_42: "avatars/42.svg",
    AVATAR_43: "avatars/43.svg",
    AVATAR_44: "avatars/44.svg",
    AVATAR_45: "avatars/45.svg",
    AVATAR_46: "avatars/46.svg",
    AVATAR_47: "avatars/47.svg",
    AVATAR_48: "avatars/48.svg",
    AVATAR_49: "avatars/49.svg",
    AVATAR_50: "avatars/50.svg",
    AVATAR_51: "avatars/51.svg",
    AVATAR_52: "avatars/52.svg",
    AVATAR_53: "avatars/53.svg",
    AVATAR_54: "avatars/54.svg",
    AVATAR_55: "avatars/55.svg",
    AVATAR_56: "avatars/56.svg",
    AVATAR_57: "avatars/57.svg",
    AVATAR_58: "avatars/58.svg",
    AVATAR_59: "avatars/59.svg",
    AVATAR_60: "avatars/60.svg",
    AVATAR_61: "avatars/61.svg",
    AVATAR_62: "avatars/62.svg",
    AVATAR_63: "avatars/63.svg",
    AVATAR_64: "avatars/64.svg",
    AVATAR_65: "avatars/65.svg",
    AVATAR_66: "avatars/66.svg",
    AVATAR_67: "avatars/67.svg",
    AVATAR_68: "avatars/68.svg",
    AVATAR_69: "avatars/69.svg",
    AVATAR_70: "avatars/70.svg",
    AVATAR_71: "avatars/71.svg",
    AVATAR_72: "avatars/72.svg",
    AVATAR_73: "avatars/73.svg",
    AVATAR_74: "avatars/74.svg",
    AVATAR_75: "avatars/75.svg",
    AVATAR_76: "avatars/76.svg",
    AVATAR_77: "avatars/77.svg",
    AVATAR_78: "avatars/78.svg",
    AVATAR_79: "avatars/79.svg",
    AVATAR_80: "avatars/80.svg",
    AVATAR_81: "avatars/81.svg",
    AVATAR_82: "avatars/82.svg",
    AVATAR_83: "avatars/83.svg",
    AVATAR_84: "avatars/84.svg",
    AVATAR_85: "avatars/85.svg",
    AVATAR_86: "avatars/86.svg",
    AVATAR_87: "avatars/87.svg",
    AVATAR_88: "avatars/88.svg",
    AVATAR_89: "avatars/89.svg",
    AVATAR_90: "avatars/90.svg",
    AVATAR_91: "avatars/91.svg",
    AVATAR_92: "avatars/92.svg",
    AVATAR_93: "avatars/93.svg",
    AVATAR_94: "avatars/94.svg",
    AVATAR_95: "avatars/95.svg",
    AVATAR_96: "avatars/96.svg",
    AVATAR_97: "avatars/97.svg",
    AVATAR_98: "avatars/98.svg",
    AVATAR_99: "avatars/99.svg",
    AVATAR_100: "avatars/100.svg",
    AVATAR_101: "avatars/101.svg",
    AVATAR_102: "avatars/102.svg",
    AVATAR_103: "avatars/103.svg",
    AVATAR_104: "avatars/104.svg",
    AVATAR_105: "avatars/105.svg",
    AVATAR_106: "avatars/106.svg",
    AVATAR_107: "avatars/107.svg",
    AVATAR_108: "avatars/108.svg",
    AVATAR_109: "avatars/109.svg",
    AVATAR_110: "avatars/110.svg",
    AVATAR_111: "avatars/111.svg",
    AVATAR_112: "avatars/112.svg",
    AVATAR_113: "avatars/113.svg",
    AVATAR_114: "avatars/114.svg",
    AVATAR_115: "avatars/115.svg",
    AVATAR_116: "avatars/116.svg",
    AVATAR_117: "avatars/117.svg",
    AVATAR_118: "avatars/118.svg",
    AVATAR_119: "avatars/119.svg",
    AVATAR_120: "avatars/120.svg",
    AVATAR_121: "avatars/121.svg",
    AVATAR_122: "avatars/122.svg",
    AVATAR_123: "avatars/123.svg",
    AVATAR_124: "avatars/124.svg",
    AVATAR_125: "avatars/125.svg",
    AVATAR_126: "avatars/126.svg",
    AVATAR_127: "avatars/127.svg",
    AVATAR_128: "avatars/128.svg",
    AVATAR_129: "avatars/129.svg",
    AVATAR_130: "avatars/130.svg",
    AVATAR_131: "avatars/131.svg",
    AVATAR_132: "avatars/132.svg",
    AVATAR_133: "avatars/133.svg",
    AVATAR_134: "avatars/134.svg",
    AVATAR_135: "avatars/135.svg",
    AVATAR_136: "avatars/136.svg",
    AVATAR_137: "avatars/137.svg",
    AVATAR_138: "avatars/138.svg",
    AVATAR_139: "avatars/139.svg",
    AVATAR_140: "avatars/140.svg",
    AVATAR_141: "avatars/141.svg",
    AVATAR_142: "avatars/142.svg",
    AVATAR_143: "avatars/143.svg",
    AVATAR_144: "avatars/144.svg",
    AVATAR_145: "avatars/145.svg",
    AVATAR_146: "avatars/146.svg",
    AVATAR_147: "avatars/147.svg",
    AVATAR_148: "avatars/148.svg",
    AVATAR_149: "avatars/149.svg",
    AVATAR_150: "avatars/150.svg",
    AVATAR_151: "avatars/151.svg",
    AVATAR_152: "avatars/152.svg",
    AVATAR_153: "avatars/153.svg",
    AVATAR_154: "avatars/154.svg",
    AVATAR_155: "avatars/155.svg",
    AVATAR_156: "avatars/156.svg",
    AVATAR_157: "avatars/157.svg",
    AVATAR_158: "avatars/158.svg",
    AVATAR_159: "avatars/159.svg",
    AVATAR_160: "avatars/160.svg",
    AVATAR_161: "avatars/161.svg",
    AVATAR_162: "avatars/162.svg",
    AVATAR_163: "avatars/163.svg",
    AVATAR_164: "avatars/164.svg",
    AVATAR_165: "avatars/165.svg",
    AVATAR_166: "avatars/166.svg",
    AVATAR_167: "avatars/167.svg",
    AVATAR_168: "avatars/168.svg",
    AVATAR_169: "avatars/169.svg",
    AVATAR_170: "avatars/170.svg",
    AVATAR_171: "avatars/171.svg",
    AVATAR_172: "avatars/172.svg",
    AVATAR_173: "avatars/173.svg",
    AVATAR_174: "avatars/174.svg",
    AVATAR_175: "avatars/175.svg",
    AVATAR_176: "avatars/176.svg",
    AVATAR_177: "avatars/177.svg",
    AVATAR_178: "avatars/178.svg",
    AVATAR_179: "avatars/179.svg",
    AVATAR_180: "avatars/180.svg",
    AVATAR_181: "avatars/181.svg",
    AVATAR_182: "avatars/182.svg",
    AVATAR_183: "avatars/183.svg",
    AVATAR_184: "avatars/184.svg",
    AVATAR_185: "avatars/185.svg",
    AVATAR_186: "avatars/186.svg",
    AVATAR_187: "avatars/187.svg",
    AVATAR_188: "avatars/188.svg",
    AVATAR_189: "avatars/189.svg",
    AVATAR_190: "avatars/190.svg",
    AVATAR_191: "avatars/191.svg",
    AVATAR_192: "avatars/192.svg",
    AVATAR_193: "avatars/193.svg",
    AVATAR_194: "avatars/194.svg",
    AVATAR_195: "avatars/195.svg",
    AVATAR_196: "avatars/196.svg",
    AVATAR_197: "avatars/197.svg",
    AVATAR_198: "avatars/198.svg",
    AVATAR_199: "avatars/199.svg",
    AVATAR_200: "avatars/200.svg",
    AVATAR_201: "avatars/201.svg",
    AVATAR_202: "avatars/202.svg",
    AVATAR_203: "avatars/203.svg",
    AVATAR_204: "avatars/204.svg",
    AVATAR_205: "avatars/205.svg",
    AVATAR_206: "avatars/206.svg",
    AVATAR_207: "avatars/207.svg",
    AVATAR_208: "avatars/208.svg",
    AVATAR_209: "avatars/209.svg",
    AVATAR_210: "avatars/210.svg",
    AVATAR_211: "avatars/211.svg",
    AVATAR_212: "avatars/212.svg",
    AVATAR_213: "avatars/213.svg",
    AVATAR_214: "avatars/214.svg",
    AVATAR_215: "avatars/215.svg",
    AVATAR_216: "avatars/216.svg",
    AVATAR_217: "avatars/217.svg",
    AVATAR_218: "avatars/218.svg",
    AVATAR_219: "avatars/219.svg",
    AVATAR_220: "avatars/220.svg",
    AVATAR_221: "avatars/221.svg",
    AVATAR_222: "avatars/222.svg",
    AVATAR_223: "avatars/223.svg",
    AVATAR_224: "avatars/224.svg",
    AVATAR_225: "avatars/225.svg",
    AVATAR_226: "avatars/226.svg",
    AVATAR_227: "avatars/227.svg",
    AVATAR_228: "avatars/228.svg",
    AVATAR_229: "avatars/229.svg",
    AVATAR_230: "avatars/230.svg",
    AVATAR_231: "avatars/231.svg",
    AVATAR_232: "avatars/232.svg",
    AVATAR_233: "avatars/233.svg",
    AVATAR_234: "avatars/234.svg",
    AVATAR_235: "avatars/235.svg",
    AVATAR_236: "avatars/236.svg",
    AVATAR_237: "avatars/237.svg",
    AVATAR_238: "avatars/238.svg",
    AVATAR_239: "avatars/239.svg",
    AVATAR_240: "avatars/240.svg",
    AVATAR_241: "avatars/241.svg",
    AVATAR_242: "avatars/242.svg",
    AVATAR_243: "avatars/243.svg",
    AVATAR_244: "avatars/244.svg",
    AVATAR_245: "avatars/245.svg",
    AVATAR_246: "avatars/246.svg",
    AVATAR_247: "avatars/247.svg",
    AVATAR_248: "avatars/248.svg",
    AVATAR_249: "avatars/249.svg",
    AVATAR_250: "avatars/250.svg",
    AVATAR_251: "avatars/251.svg",
    AVATAR_252: "avatars/252.svg",
    AVATAR_253: "avatars/253.svg",
    AVATAR_254: "avatars/254.svg",
    AVATAR_255: "avatars/255.svg",
    AVATAR_256: "avatars/256.svg",
    AVATAR_257: "avatars/257.svg",
    AVATAR_258: "avatars/258.svg",
    AVATAR_259: "avatars/259.svg",
    AVATAR_260: "avatars/260.svg",
    AVATAR_261: "avatars/261.svg",
    AVATAR_262: "avatars/262.svg",
    AVATAR_263: "avatars/263.svg",
    AVATAR_264: "avatars/264.svg",
    AVATAR_265: "avatars/265.svg",
    AVATAR_266: "avatars/266.svg",
    AVATAR_267: "avatars/267.svg",
    AVATAR_268: "avatars/268.svg",
    AVATAR_269: "avatars/269.svg",
    AVATAR_270: "avatars/270.svg",
};


/***/ }),

/***/ "./client/Language/LanguageList.ts":
/*!*****************************************!*\
  !*** ./client/Language/LanguageList.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const EN_1 = __webpack_require__(/*! ./List/EN */ "./client/Language/List/EN.ts");
const FR_1 = __webpack_require__(/*! ./List/FR */ "./client/Language/List/FR.ts");
exports["default"] = {
    EN: EN_1.EN,
    FR: FR_1.FR
};


/***/ }),

/***/ "./client/Language/LanguageManager.ts":
/*!********************************************!*\
  !*** ./client/Language/LanguageManager.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const main_1 = __importDefault(__webpack_require__(/*! ../main */ "./client/main.ts"));
const LanguageList_1 = __importDefault(__webpack_require__(/*! ./LanguageList */ "./client/Language/LanguageList.ts"));
class LanguageManager {
    constructor() {
        this.defaultLanguage = LanguageList_1.default.EN;
        this.activeLanguage = null;
    }
    init() {
        main_1.default.logger.sendLog("INFO", "Initiliazing languages...");
        const languageStored = localStorage.getItem("language");
        if (languageStored != null)
            return this.setLanguage(languageStored);
        const userLanguage = window.navigator.language || window.navigator.userLanguage;
        if (userLanguage != null)
            this.setLanguage(userLanguage.substring(0, 2));
        else
            this.activeLanguage = this.defaultLanguage;
    }
    setLanguage(code) {
        const languageValue = this.getLanguageByCode(code);
        if (languageValue != null) {
            localStorage.setItem("language", code.toUpperCase());
            this.activeLanguage = languageValue;
        }
        else
            this.activeLanguage = this.defaultLanguage;
    }
    getLanguageByCode(code) {
        for (let i in LanguageList_1.default) {
            if (code.toUpperCase() == i)
                return LanguageList_1.default[i];
        }
        return null;
    }
    getAvailableLanguages() {
        const availableLanguage = [];
        for (let i in LanguageList_1.default) {
            availableLanguage.push(i);
        }
        return availableLanguage;
    }
    getValueForKey(key, params = []) {
        if (this.activeLanguage != null && this.activeLanguage[key] != null) {
            params.forEach((param, index) => {
                if (param != null && param.toString().startsWith("%TRAD_"))
                    params[index] = this.getValueForKey(param.replace("%TRAD_", ""));
            });
            return this.activeLanguage[key].supplant(params);
        }
        else {
            if (this.defaultLanguage[key] != null) {
                params.forEach((param, index) => {
                    if (param != null && param.toString().startsWith("%TRAD_"))
                        params[index] = this.getValueForKey(param.replace("%TRAD_", ""));
                });
                return this.defaultLanguage[key].supplant(params);
            }
        }
        return "Missing key: " + key;
    }
}
exports["default"] = LanguageManager;


/***/ }),

/***/ "./client/Language/List/EN.ts":
/*!************************************!*\
  !*** ./client/Language/List/EN.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EN = void 0;
exports.EN = {
    CODE: "EN",
    // LOADING
    LOADING_MESSAGE: "Initializing {0}...",
    LOADING_RESOURCES: "Loading resources...",
    LOADING_CONNECTION_TO_MAIN_SERVER: "Connecting to main server...",
    LOADING_FETCHING_REGION_SERVERS: "Fetching region servers...",
    // GENERIC_ERROR
    GENERIC_ERROR_CONNECTION_LOST: "Connection to server lost.",
    GENERIC_ERROR_SERVERS: "An error occurred with servers.",
    GENERIC_ERROR_NO_SERVER_AVAILABLE: "There are no servers available.",
    // ACCOUNT
    ACCOUNT_LANGUAGE: "Language",
    ACCOUNT_LOGIN: "Login",
    ACCOUNT_REGISTER: "Register",
    ACCOUNT_USERNAME: "Username",
    ACCOUNT_PASSWORD: "Password",
    ACCOUNT_CONFIRM_PASSWORD: "Confirm your password",
    ACCOUNT_SERVER: "Server [{0}] - Ping: {1}ms",
    // ACCOUNT_ERROR
    ACCOUNT_ERROR_BANNED: "You are banned until the {0}.",
    ACCOUNT_ERROR_OCCURED: "An error occured, please reload the page.",
    ACCOUNT_ERROR_FIELDS: "Please complete all fields.",
    ACCOUNT_ERROR_ALREADY_LOGGED: "You are already logged.",
    ACCOUNT_ERROR_INVALID: "Invalid username or password.",
    ACCOUNT_ERROR_USERNAME_LENGTH: "Your nickname must be between 3 and 15 characters long.",
    ACCOUNT_ERROR_USERNAME_ALPHANUMERIC: "Your nickname must be alphanumeric.",
    ACCOUNT_ERROR_USERNAME_ALREADY_USED: "Your nickname is already used.",
    ACCOUNT_ERROR_USERNAME_START_NUMBER: "Your nickname cannot start with a number.",
    ACCOUNT_ERROR_PASSWORD_LENGTH: "Your password must be at least 6 characters long.",
    ACCOUNT_ERROR_PASSWORDS_DIFFERENT: "Your two passwords are different.",
    ACCOUNT_INVALID_SERVER: "The selected server is not available.",
    // GAME
    // GAME_GENERAL
    GAME_GENERAL_LOADING: "Loading...",
    GAME_GENERAL_CLOSE: "Close",
    GAME_GENERAL_OVERTIME: "Overtime!",
    GAME_GENERAL_PAUSE: "Pause",
    GAME_GENERAL_OWN_GOAL: "Own goal by <span class='{0}'>{1}</span>!",
    GAME_GENERAL_GOAL: "Goal by <span class='{0}'>{1}</span>!",
    GAME_GENERAL_NOT_AVAILABLE: "Not available yet...",
    GAME_GENERAL_TEAM: "Team",
    GAME_GENERAL_PLAYER: "Player",
    GAME_GENERAL_BY_PLAYER: "By player",
    GAME_GENERAL_ACTION: "Action",
    GAME_GENERAL_DATE: "Date",
    GAME_GENERAL_TYPE: "Type",
    GAME_GENERAL_EXPIRE: "Expire",
    GAME_GENERAL_VALIDATE: "Validate",
    // TEAM
    GAME_TEAM_SPECTATORS: "Spectators",
    GAME_TEAM_RED: "Red",
    GAME_TEAM_BLUE: "Blue",
    // GAME_CHAT
    GAME_CHAT_MESSAGE: "Message...",
    GAME_CHAT_OPTION_ROOM: "Room",
    GAME_CHAT_OPTION_TEAM: "Team",
    GAME_CHAT_ROOM_JOINED: "You just joined the room {0}, type /room <roomName> to change room.",
    GAME_CHAT_PM_FROM: "Whisper from {0}",
    GAME_CHAT_PM_TO: "Whisper to {0}",
    GAME_CHAT_PM_OFFLINE: "{0} is offline.",
    GAME_CHAT_FRIEND_ADDED: "{0} is now your friend.",
    GAME_CHAT_FRIEND_OTHER_ADDED: "{0} added you to their friends list. Type /friend {0} to add him back.",
    GAME_CHAT_FRIEND_OTHER_ADDED_BACK: "{0} added you back to their friend list.",
    GAME_CHAT_JOIN_ROOM: "{0} joined the room.",
    GAME_CHAT_LEFT_ROOM: "{0} left the room.",
    GAME_CHAT_FRIEND_LOGIN: "{0} just logged in.",
    GAME_CHAT_FRIEND_LOGOUT: "{0} just logged out.",
    GAME_CHAT_FRIEND_ERROR_MAX: "You have reached the limit of {0} friends.",
    GAME_CHAT_INVALID_COMMAND: "Invalid command.",
    GAME_CHAT_MUTED_MINUTES: "You are muted for {0} minute(s).",
    GAME_CHAT_MUTED_HOURS: "You are muted for {0} hours(s).",
    GAME_CHAT_NEW_REPORT: "New report by {0}.",
    GAME_CHAT_REPORTED: "{0} has been reported.",
    GAME_CHAT_ALREADY_REPORTED: "You have already reported {0}.",
    GAME_CHAT_REBOOT_CANCEL: "Server restart was canceled.",
    GAME_CHAT_REBOOT_MINUTES: "The server will restart in {0} minutes.",
    GAME_CHAT_REBOOT_SECONDS: "The server will restart in {0} seconds.",
    GAME_CHAT_LEVEL_UP: "You are now level {0}.",
    GAME_CHAT_RANK_UP: "You are now {0} {1}.",
    // GAME_USER_MENU
    GAME_USER_MENU_PROFILE: "Profile",
    GAME_USER_MENU_WHISPER: "Whisper",
    GAME_USER_MENU_FRIEND: "Add as friend",
    GAME_USER_MENU_REPORT: "Report",
    GAME_USER_MENU_MUTE: "Mute",
    GAME_USER_MENU_BAN: "Ban",
    // GAME_SETTINGS
    GAME_SETTINGS: "Settings",
    GAME_MENU_GRAPHICS: "Graphics",
    GAME_MENU_GRAPHICS_ZOOM: "Zoom",
    GAME_MENU_GRAPHICS_FPS: "FPS Limit",
    GAME_MENU_GRAPHICS_FPS_NO_LIMIT: "None",
    GAME_MENU_AUDIO: "Audio",
    GAME_MENU_AUDIO_GENERAL: "General",
    GAME_MENU_AUDIO_CHAT: "Chat",
    GAME_MENU_AUDIO_GAME: "Game",
    GAME_MENU_AUDIO_NOTIFICATION: "Notification",
    GAME_MENU_INPUTS: "Inputs",
    GAME_MENU_INPUTS_PRESS: "Press a key",
    GAME_MENU_INPUTS_UP: "Up",
    GAME_MENU_INPUTS_DOWN: "Down",
    GAME_MENU_INPUTS_LEFT: "Left",
    GAME_MENU_INPUTS_RIGHT: "Right",
    GAME_MENU_INPUTS_KICK: "Kick",
    GAME_MENU_INPUTS_TOGGLE_CHAT: "Toggle chat",
    // GAME_STATS
    GAME_STATS_REGISTERED: "Registered",
    GAME_STATS_LEVEL_XP: "Level",
    GAME_STATS_ELO: "Rank",
    GAME_STATS_GAMES: "Games",
    GAME_STATS_GAMES_PLAYED: "Games played",
    GAME_STATS_GAMES_WON: "Games won",
    GAME_STATS_GAMES_LOST: "Games lost",
    GAME_STATS_WIN_RATE: "Win rate",
    GAME_STATS_BEST_STREAK: "Best streak",
    GAME_STATS_GENERAL: "General stats",
    GAME_STATS_SHOTS: "Shots",
    GAME_STATS_SHOTS_PER_MATCH: "Shots per match",
    GAME_STATS_GOALS: "Goals",
    GAME_STATS_GOALS_PER_MATCH: "Goals per match",
    GAME_STATS_HAT_TRICKS: "Hat tricks",
    GAME_STATS_ASSISTS: "Assists",
    GAME_STATS_ASSISTS_PER_MATCH: "Assists per match",
    GAME_STATS_SAVES: "Saves",
    GAME_STATS_SAVES_PER_MATCH: "Saves per match",
    GAME_STATS_PASS_ACCURACY: "Pass accuracy",
    GAME_STATS_PASS_PER_MATCH: "Pass per match",
    GAME_STATS_GOALKEEPER: "Goalkeeper",
    GAME_STATS_PLAYED_GK: "Games played as goalkeeper",
    GAME_STATS_CS: "Clean sheets",
    GAME_STATS_CS_PERCENTAGE: "Clean sheets percentage",
    GAME_STATS_BADGES: "Badges unlocked",
    // GAME_LEADERBOARD
    GAME_LEADERBOARD: "Leaderboard",
    GAME_LEADERBOARD_FILTER: "Filter by",
    // GAME_FRIENDS
    GAME_FRIENDS: "Friends",
    GAME_FRIENDS_NONE: "Your friends list is empty.",
    // GAME_SHOP
    GAME_SHOP: "Shop",
    GAME_SHOP_CATEGORY_FLAGS: "Flags",
    GAME_SHOP_EQUIP: "Equip",
    GAME_SHOP_EQUIPED: "Equiped",
    // GAME_SANCTION
    GAME_SANCTION_MUTE: "{0} has been muted for {1} hour(s).",
    GAME_SANCTION_BAN: "{0} has been banned for {1} hour(s).",
    // GAME_ADMIN
    GAME_ADMIN: "Admin panel",
    GAME_ADMIN_TEAM: "Team",
    GAME_ADMIN_REPORTS: "Reports",
    GAME_ADMIN_SANCTION_MUTE: "Mute",
    GAME_ADMIN_SANCTION_BAN: "Ban",
    GAME_ADMIN_SANCTION_TIME: "Duration in hours",
    GAME_ADMIN_SANCTION_REASON: "Reason",
    GAME_ADMIN_SANCTIONS: "Sanctions",
    GAME_ADMIN_NEW_SANCTION: "New sanction",
    GAME_ADMIN_RANK: "Ranks",
    GAME_ADMIN_CHATLOGS: "Chat logs",
    GAME_ADMIN_ERROR_USERNAME: "This player does not exist.",
    GAME_ADMIN_ERROR_RANK: "{0} has already {1} rank.",
    GAME_ADMIN_SUCCESS_RANK: "{0} is now {1}.",
    GAME_ADMIN_ERROR_RANK_PERMS: "You can't change {0} rank.",
    GAME_ADMIN_ERROR_SANCTION_PERMS: "You can't sanctionate {0}.",
    GAME_ADMIN_ERROR_SANCTION_ALREADY_MUTED: "{0} is already muted.",
    GAME_ADMIN_ERROR_SANCTION_ALREADY_BAN: "{0} is already banned.",
    GAME_ADMIN_ERROR_SANCTION_DURATION: "The duration is invalid.",
    // GAME_RANK
    GAME_RANK_OWNER: "Owner",
    GAME_RANK_MANAGER: "Manager",
    GAME_RANK_ADMIN: "Admin",
    GAME_RANK_MOD: "Moderator",
    GAME_RANK_VIP: "VIP",
    GAME_RANK_USER: "User",
    // GAME_ELO
    GAME_ELO_IRON: "Iron",
    GAME_ELO_SILVER: "Silver",
    GAME_ELO_GOLD: "Gold",
    GAME_ELO_PLATINIUM: "Platinium",
    GAME_ELO_DIAMOND: "Diamond",
    GAME_ELO_CHAMPION: "Champion",
    GAME_ELO_CHALLENGER: "Challenger",
    // HISTORY
    HISTORY_MATCH_STARTED: "Match started",
    HISTORY_SHOT: "Shot by <span class='{0}'>{1}</span>",
    HISTORY_SAVE: "Save by <span class='{0}'>{1}</span>",
    HISTORY_GOAL: "Goal by <span class='{0}'>{1}</span>",
    HISTORY_GOAL_ASSISTED: "Goal by <span class='{0}'>{1}</span> assisted by <span class='{0}'>{2}</span>",
    HISTORY_OWN_GOAL: "Own goal by <span class='{0}'>{1}</span>",
    HISTORY_END_RED: "Red team won the game 🔴 {0} - {1} 🔵, possession 🔴 {2}% - {3}% 🔵",
    HISTORY_END_BLUE: "Blue team won the game 🔴 {0} - {1} 🔵, possession 🔴 {2}% - {3}% 🔵",
    // COPYRIGHT
    COPYRIGHT: "© {0}, developed with ♥ by OvB."
};


/***/ }),

/***/ "./client/Language/List/FR.ts":
/*!************************************!*\
  !*** ./client/Language/List/FR.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FR = void 0;
exports.FR = {
    CODE: "FR",
    // LOADING
    LOADING_MESSAGE: "Initialisation de {0}...",
    LOADING_RESOURCES: "Chargement des ressources...",
    LOADING_CONNECTION_TO_MAIN_SERVER: "Connexion au serveur principal...",
    LOADING_FETCHING_REGION_SERVERS: "Récupération des serveurs de région...",
    // GENERIC_ERROR
    GENERIC_ERROR_CONNECTION_LOST: "Connexion au serveur perdue.",
    GENERIC_ERROR_SERVERS: "Une erreur s'est produite avec les serveurs.",
    GENERIC_ERROR_NO_SERVER_AVAILABLE: "Il n'y a aucun serveur disponible.",
    // ACCOUNT
    ACCOUNT_LANGUAGE: "Langage",
    ACCOUNT_LOGIN: "Connexion",
    ACCOUNT_REGISTER: "Inscription",
    ACCOUNT_USERNAME: "Pseudonyme",
    ACCOUNT_PASSWORD: "Mot de passe",
    ACCOUNT_CONFIRM_PASSWORD: "Confirmez votre mot de passe",
    ACCOUNT_SERVER: "Serveur [{0}] - Ping: {1}ms",
    // ACCOUNT_ERROR
    ACCOUNT_ERROR_OCCURED: "Une erreur est survenue, veuillez recharger la page.",
    ACCOUNT_ERROR_FIELDS: "Merci de compléter tous les champs.",
    ACCOUNT_ERROR_ALREADY_LOGGED: "Vous êtes déjà connecté.",
    ACCOUNT_ERROR_INVALID: "Pseuonyme ou mot de passe invalide.",
    ACCOUNT_ERROR_USERNAME_LENGTH: "Votre pseudonyme doit faire entre 3 et 15 caractères.",
    ACCOUNT_ERROR_USERNAME_ALPHANUMERIC: "Votre pseudonyme doit être alphanumérique.",
    ACCOUNT_ERROR_PASSWORD_LENGTH: "Votre mot de passe doit faire 6 caractères minimum.",
    ACCOUNT_ERROR_PASSWORDS_DIFFERENT: "Vos deux mots de passe sont différents.",
    ACCOUNT_INVALID_SERVER: "Le serveur sélectionné n'est pas disponible.",
    // COPYRIGHT
    COPYRIGHT: "© {0}, développé avec ♥ par OvB."
};


/***/ }),

/***/ "./client/Ressource/ResourceManager.ts":
/*!*********************************************!*\
  !*** ./client/Ressource/ResourceManager.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Resources_1 = __webpack_require__(/*! ../Config/Resources */ "./client/Config/Resources.ts");
const main_1 = __importDefault(__webpack_require__(/*! ../main */ "./client/main.ts"));
class ResourceManager {
    constructor() {
        this.resources = {};
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                main_1.default.logger.sendLog("INFO", "Initiliazing resources...");
                main_1.default.sceneManager.initScene(0 /* SceneList.MessageScene */, {
                    message: main_1.default.languageManager.getValueForKey('LOADING_RESOURCES')
                });
                const listOfPromise = [];
                for (let i in Resources_1.Resources) {
                    listOfPromise.push(this.loadResource(i, Resources_1.Resources[i]));
                }
                Promise.all(listOfPromise).then(() => {
                    resolve("All resources have been loaded.");
                }).catch((e) => reject(e.toString()));
            });
        });
    }
    loadResource(key, fileName) {
        const instance = this;
        return new Promise((resolve, reject) => {
            if (fileName.endsWith(".png") || fileName.endsWith(".jpg") || fileName.endsWith(".svg")) {
                const image = new Image();
                image.onload = function () {
                    instance.resources[`IMAGE_${key}`] = image;
                    resolve(`Image ${key} loaded.`);
                };
                image.onerror = function () {
                    reject(`Impossible to load image ${key}.`);
                };
                image.src = `assets/images/resources/${fileName}`;
            }
            else if (fileName.endsWith(".mp3") || fileName.endsWith(".wav")) {
                const audio = new Audio(`assets/audio/${fileName}`);
                audio.onloadeddata = function () {
                    instance.resources[`AUDIO_${key}`] = audio;
                    resolve(`Audio ${key} loaded.`);
                };
                audio.onerror = function () {
                    reject(`Impossible to load audio ${key}.`);
                };
            }
        });
    }
}
exports["default"] = ResourceManager;


/***/ }),

/***/ "./client/Room/Room.ts":
/*!*****************************!*\
  !*** ./client/Room/Room.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const ShareableData_1 = __importDefault(__webpack_require__(/*! ../../shared/ShareableData/ShareableData */ "./shared/ShareableData/ShareableData.ts"));
class Room {
    constructor(data) {
        this.id = data.id;
        this.currentPlayers = data.currentPlayers;
        this.state = data.state;
        this.score = data.score;
        this.stadium = data.stadium;
        this.pickMode = data.pickMode;
        this.history = data.history;
        this.discHistory = {};
    }
    reorderPlayer(playersArray) {
        this.currentPlayers = playersArray;
    }
    getPlayer(playerId) {
        const player = this.currentPlayers.filter((player) => player.id == playerId)[0];
        if (player != null)
            return player;
        else
            return null;
    }
    playerJoin(player) {
        const playerData = this.getPlayer(player.id);
        if (playerData != null)
            return;
        this.currentPlayers.push(player);
    }
    playerLeave(playerId) {
        const playerData = this.getPlayer(playerId);
        if (playerData == null)
            return;
        this.currentPlayers = this.currentPlayers.filter(function (player) {
            return player.id != playerId;
        });
    }
    update(data) {
        this.currentPlayers = data.currentPlayers;
        this.state = data.state;
        this.score = data.score;
        this.stadium.discs = data.discs;
        for (let i in this.stadium.discs) {
            if (this.discHistory[i] == null)
                this.discHistory[i] = [];
            this.discHistory[i].push(new ShareableData_1.default(performance.now(), { x: this.stadium.discs[i].x, y: this.stadium.discs[i].y }));
        }
    }
}
exports["default"] = Room;


/***/ }),

/***/ "./client/Scene/List/GameScene.ts":
/*!****************************************!*\
  !*** ./client/Scene/List/GameScene.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Base_1 = __webpack_require__(/*! ../../../shared/Base/Base */ "./shared/Base/Base.ts");
const Color_1 = __importDefault(__webpack_require__(/*! ../../../shared/Color/Color */ "./shared/Color/Color.ts"));
const Elo_1 = __webpack_require__(/*! ../../../shared/Elo/Elo */ "./shared/Elo/Elo.ts");
const Level_1 = __webpack_require__(/*! ../../../shared/Level/Level */ "./shared/Level/Level.ts");
const RoomState_1 = __webpack_require__(/*! ../../../shared/RoomState/RoomState */ "./shared/RoomState/RoomState.ts");
const Team_1 = __importDefault(__webpack_require__(/*! ../../../shared/Team/Team */ "./shared/Team/Team.ts"));
const main_1 = __importDefault(__webpack_require__(/*! ../../main */ "./client/main.ts"));
const Scene_1 = __importDefault(__webpack_require__(/*! ../Scene */ "./client/Scene/Scene.ts"));
class GameScene extends Scene_1.default {
    constructor(state) {
        super(state.name);
        this.state = {
            currentUser: state.params.currentUser,
            canvas: null,
            ctx: null,
            zIndex: 0,
            fps: 0,
            canvas_rect: [-150, -75, 150, 75],
            cameraFollow: { x: 0, y: 0 },
            unpauseInterval: 0,
            inputs: {
                left: false,
                right: false,
                up: false,
                down: false,
                kick: false
            },
            lastChangeFps: null,
            settings_category: "graphics",
            settings_record_input: null,
            focusUser: null
        };
    }
    setFps(val) {
        const fps = document.getElementById("fps");
        if (fps == null)
            return;
        const now = window.performance.now();
        this.state.fps = val;
        if (this.state.lastChangeFps != null && this.state.lastChangeFps + 1000 > now)
            return;
        this.state.lastChangeFps = now;
        fps.textContent = val.toString();
    }
    setState(params) {
        super.setState(params);
        for (let i in params) {
            this.state[i] = params[i];
        }
        this.render();
    }
    onWillInit() {
        super.onWillInit();
    }
    onInitialized() {
        super.onInitialized();
        this.state.canvas = document.getElementById("game");
        this.state.ctx = this.state.canvas.getContext("2d");
        Array.from(document.querySelectorAll('#settings .menu li')).forEach((element) => {
            element.addEventListener("click", this.setSettingsCategory.bind(this));
        });
        Array.from(document.querySelectorAll('#admin_menu li')).forEach((element) => {
            element.addEventListener("click", this.setAdminCategory.bind(this));
        });
        Array.from(document.querySelectorAll('#settings input, #settings select')).forEach((element) => {
            element.addEventListener("change", this.setSettings.bind(this));
        });
        const leaderboardFilter = document.getElementById("leaderboardFilter");
        if (leaderboardFilter != null)
            leaderboardFilter.addEventListener("change", this.requestLeaderboard.bind(this));
        const requestProfile = document.getElementById("request_profile");
        if (requestProfile != null)
            requestProfile.addEventListener("click", this.switchProfile.bind(this));
        Array.from(document.getElementsByClassName("general_menu")).forEach((el) => {
            Array.from(el.getElementsByTagName("div")).forEach((element) => {
                element.addEventListener("click", this.switchMenu.bind(this));
            });
        });
        Array.from(document.getElementsByClassName("pick_list_team")).forEach((el) => {
            el.addEventListener("dragover", (e) => e.preventDefault());
            el.addEventListener("drop", this.drop.bind(this));
        });
        const user_menu = document.getElementById("user_menu");
        if (user_menu != null) {
            const li = user_menu.getElementsByTagName("li");
            Array.from(li).forEach((element) => {
                element.addEventListener("click", this.userMenuItem.bind(this));
            });
        }
        Array.from(document.getElementsByClassName("close")).forEach((el) => {
            el.addEventListener("click", () => {
                if (el.parentNode != null && el.parentNode.parentNode != null && el.parentNode.parentNode.parentElement != null)
                    el.parentNode.parentNode.parentNode.style.display = "none";
            });
        });
        document.addEventListener('keydown', this.keyDownHandler.bind(this), false);
        document.addEventListener('keyup', this.KeyUpHandler.bind(this), false);
        const chatForm = document.getElementById("chatForm");
        chatForm === null || chatForm === void 0 ? void 0 : chatForm.addEventListener("submit", this.sendChat.bind(this));
        this.renderMenu();
    }
    renderMenu() {
        Array.from(document.getElementsByClassName("general_menu")).forEach((el) => {
            Array.from(el.getElementsByTagName("div")).forEach((element) => {
                if (element.getAttribute("type") == "admin" && ["user", "vip"].includes(main_1.default.currentUser.rank))
                    element.style.display = "none";
                else
                    element.style.display = "block";
            });
        });
    }
    profileData(data) {
        const profile = document.getElementById("profile");
        if (profile == null)
            return;
        Array.from(profile.querySelectorAll("img, span")).forEach((el) => {
            const profile_data = el.getAttribute("profile_data");
            if (profile_data == null)
                return;
            if (profile_data == "username") {
                el.removeAttribute("class");
                el.classList.add(data.rank);
            }
            if (profile_data == "avatar")
                el.setAttribute("src", main_1.default.resourceManager.resources["IMAGE_AVATAR_" + data.avatar].src);
            if (profile_data == "online") {
                if (data.online)
                    el.classList.add("online");
                else
                    el.classList.remove("online");
            }
            else if (data[profile_data] != null)
                el.textContent = data[profile_data];
            else if (data.stats[profile_data] != null) {
                if (profile_data == "elo")
                    el.textContent = `${main_1.default.languageManager.getValueForKey((0, Elo_1.getElo)(data.stats.elo).name)} ${(0, Elo_1.getElo)(data.stats.elo).value} (${data.stats.elo})`;
                else if (profile_data == "level_xp") {
                    el.textContent = (0, Level_1.getLevel)(data.stats.level_xp).toString();
                }
                else {
                    el.textContent = data.stats[profile_data];
                    ["win_rate", "pass_accuracy", "cs_percentage"].includes(profile_data) ? el.textContent += "%" : null;
                }
            }
        });
        this.state.zIndex++;
        profile.style.zIndex = this.state.zIndex;
        profile.style.display = "block";
    }
    switchMenu(e) {
        this.state.zIndex++;
        switch (e.srcElement.getAttribute("type")) {
            case "shop": {
                this.switchShop();
                break;
            }
            case "friends": {
                this.switchFriends();
                break;
            }
            case "settings": {
                this.switchSettings();
                break;
            }
            case "menu": {
                this.switcMenu();
                break;
            }
            case "leaderboard": {
                this.switchLeaderboard();
                break;
            }
            case "admin": {
                this.switchAdmin();
                break;
            }
            case "team": {
                this.newChat({ type: "announcement", message: "GAME_GENERAL_NOT_AVAILABLE", color: Color_1.default.ROOM_ANNOUNCEMENT, sound: 1, officialTrad: true });
                break;
            }
        }
    }
    setSettings(e) {
        if (e.srcElement.checked != null)
            return main_1.default.settingsManager.setSettings(e.srcElement.getAttribute("settings_category"), e.srcElement.getAttribute("settings_val"), e.srcElement.checked);
        main_1.default.settingsManager.setSettings(e.srcElement.getAttribute("settings_category"), e.srcElement.getAttribute("settings_val"), e.srcElement.value);
    }
    setSettingsCategory(e) {
        this.state.settings_category = e.srcElement.getAttribute("category");
        Array.from(document.querySelectorAll('#settings .menu li')).forEach((element) => {
            if (element.getAttribute("category") == this.state.settings_category && !element.classList.contains("selected"))
                element.classList.add("selected");
            else
                element.classList.remove("selected");
        });
        this.reloadSettings();
    }
    removeKey(type, key) {
        main_1.default.settingsManager.removeKey(type, key);
        this.reloadSettings();
    }
    addHistory(data) {
        const history = document.getElementById("history");
        if (history == null)
            return;
        const div = document.createElement("div");
        div.classList.add("row");
        const icon = document.createElement("img");
        div.appendChild(icon);
        const info = document.createElement("div");
        const time = document.createElement("span");
        time.classList.add("time");
        time.textContent = this.fmtMSS(Math.floor(data.value.time));
        info.appendChild(time);
        const message = document.createElement("div");
        info.appendChild(message);
        div.appendChild(info);
        switch (data.key) {
            case "matchStarted": {
                history.innerHTML = "";
                icon.src = "assets/images/icons/whistle.png";
                message.textContent = main_1.default.languageManager.getValueForKey("HISTORY_MATCH_STARTED");
                break;
            }
            case "shot": {
                icon.src = "assets/images/icons/shot.png";
                message.innerHTML = main_1.default.languageManager.getValueForKey("HISTORY_SHOT", [data.value.team.name, data.value.username]);
                break;
            }
            case "save": {
                icon.src = "assets/images/icons/save.png";
                message.innerHTML = main_1.default.languageManager.getValueForKey("HISTORY_SAVE", [data.value.team.name, data.value.username]);
                break;
            }
            case "goal": {
                icon.src = "assets/images/icons/ball.png";
                const notif = document.getElementById("notif");
                if (notif != null) {
                    if (data.value.team.id != data.value.score_team.id)
                        notif.innerHTML = `${main_1.default.languageManager.getValueForKey("GAME_GENERAL_OWN_GOAL", [data.value.team.name, data.value.username])}`;
                    else
                        notif.innerHTML = `${main_1.default.languageManager.getValueForKey("GAME_GENERAL_GOAL", [data.value.team.name, data.value.username])}`;
                }
                if (data.value.team.id != data.value.score_team.id)
                    message.innerHTML = main_1.default.languageManager.getValueForKey("HISTORY_OWN_GOAL", [data.value.team.name, data.value.username]);
                else if (data.value.assist_id != null)
                    message.innerHTML = main_1.default.languageManager.getValueForKey("HISTORY_GOAL_ASSISTED", [data.value.team.name, data.value.username, data.value.assist_username]);
                else
                    message.innerHTML = main_1.default.languageManager.getValueForKey("HISTORY_GOAL", [data.value.team.name, data.value.username]);
                break;
            }
            case "endGame": {
                icon.src = "assets/images/icons/whistle.png";
                if (data.value.score.red > data.value.score.blue)
                    message.innerHTML = main_1.default.languageManager.getValueForKey("HISTORY_END_RED", [data.value.score.red, data.value.score.blue, data.value.possession.red, data.value.possession.blue]);
                else
                    message.innerHTML = main_1.default.languageManager.getValueForKey("HISTORY_END_BLUE", [data.value.score.red, data.value.score.blue, data.value.possession.red, data.value.possession.blue]);
                break;
            }
        }
        history.prepend(div);
    }
    recordKey(type) {
        const recordKey = document.getElementById("recordKey");
        if (recordKey == null)
            return;
        this.state.settings_record_input = type;
        this.state.inputs.up = false;
        this.state.inputs.down = false;
        this.state.inputs.left = false;
        this.state.inputs.right = false;
        this.state.inputs.kick = false;
        recordKey.style.display = "flex";
    }
    reloadSettings() {
        const settings = document.getElementById("settings"), recordKey = document.getElementById("recordKey");
        if (settings == null)
            return;
        if (recordKey != null)
            recordKey.style.display = "none";
        Array.from(settings.getElementsByClassName("category")).forEach((category) => {
            const category_name = category.getAttribute("category_name");
            if (category_name != null) {
                if (category_name == this.state.settings_category)
                    category.style.display = "block";
                else
                    category.style.display = "none";
            }
            Array.from(category.querySelectorAll("input, select, .inputs_value")).forEach((element) => {
                const settings_category = element.getAttribute("settings_category"), settings_val = element.getAttribute("settings_val");
                if (settings_category != null && settings_val != null) {
                    switch (settings_category) {
                        case "graphics": {
                            if (main_1.default.settingsManager.graphics[settings_val] != null) {
                                if (element.checked != null)
                                    element.checked = main_1.default.settingsManager.graphics[settings_val];
                                else
                                    element.value = main_1.default.settingsManager.graphics[settings_val];
                            }
                            break;
                        }
                        case "audio": {
                            if (main_1.default.settingsManager.audio[settings_val] != null) {
                                if (element.checked != null)
                                    element.checked = main_1.default.settingsManager.audio[settings_val];
                                else
                                    element.value = main_1.default.settingsManager.audio[settings_val];
                            }
                            break;
                        }
                        case "inputs": {
                            element.innerHTML = "";
                            if (main_1.default.settingsManager.inputs[settings_val] == null)
                                return;
                            main_1.default.settingsManager.inputs[settings_val].forEach((key) => {
                                const inputElement = document.createElement("div");
                                inputElement.classList.add("gameInput");
                                inputElement.textContent = key.toString().replace("Key", "");
                                const deleteInput = document.createElement("img");
                                deleteInput.src = "assets/images/icons/cross.svg";
                                deleteInput.addEventListener("click", () => this.removeKey(settings_val, key));
                                inputElement.appendChild(deleteInput);
                                element.appendChild(inputElement);
                            });
                            const inputElement = document.createElement("div");
                            inputElement.classList.add("gameInput");
                            const addInput = document.createElement("img");
                            addInput.classList.add("add");
                            addInput.src = "assets/images/icons/add.svg";
                            addInput.addEventListener("click", () => this.recordKey(settings_val));
                            inputElement.appendChild(addInput);
                            element.appendChild(inputElement);
                            break;
                        }
                    }
                }
            });
        });
    }
    switchProfile() {
        if (main_1.default.currentUser == null)
            return;
        const profile = document.getElementById("profile");
        if (profile == null)
            return;
        if (profile.style.display == "block") {
            profile.style.display = "none";
            return;
        }
        main_1.default.webSocketsManager.sendMsg("requestProfile", main_1.default.currentUser.username);
    }
    requestLeaderboard(e) {
        this.fetchLeaderboard(e.srcElement.value);
    }
    fetchLeaderboard(key) {
        const leaderboardContent = document.getElementById("leaderboardContent");
        if (leaderboardContent == null)
            return;
        leaderboardContent.innerHTML = `<div class="loader"></div>`;
        main_1.default.webSocketsManager.sendMsg("fetchLeaderboard", key);
    }
    setLeaderboardData(data) {
        const leaderboardContent = document.getElementById("leaderboardContent");
        if (leaderboardContent == null)
            return;
        leaderboardContent.innerHTML = ``;
        data.players.forEach((player, index) => {
            const div = document.createElement("div");
            div.classList.add("row");
            const avatar = document.createElement("img");
            avatar.src = main_1.default.resourceManager.resources["IMAGE_AVATAR_" + player.avatar].src;
            div.appendChild(avatar);
            const username = document.createElement("div");
            username.classList.add("username");
            username.textContent = player.username;
            div.appendChild(username);
            const rank = document.createElement("div");
            rank.classList.add("rank");
            rank.textContent = "#" + (index + 1).toString();
            div.appendChild(rank);
            const value = document.createElement("div");
            value.classList.add("value");
            if (["win_rate", "pass_accuracy", "cs_percentage"].includes(data.key))
                value.textContent = player.value + "%";
            else if (data.key == "level_xp")
                value.textContent = (0, Level_1.getLevel)(player.value).toString();
            else if (data.key == "elo")
                value.textContent = `${main_1.default.languageManager.getValueForKey((0, Elo_1.getElo)(player.value).name)} ${(0, Elo_1.getElo)(player.value).value} (${player.value})`;
            else
                value.textContent = player.value;
            div.appendChild(value);
            leaderboardContent.appendChild(div);
        });
    }
    hideMenu() {
        if (main_1.default.currentUser.currentRoom.state != RoomState_1.RoomState.KICK_OFF_RESET) {
            setTimeout(this.hideMenu.bind(this), 10);
            return;
        }
        const pick_list = document.getElementById("pick_list");
        if (pick_list == null)
            return;
        if (pick_list.style.display == "none")
            return;
        pick_list.style.display = "none";
    }
    showMenu() {
        const pick_list = document.getElementById("pick_list");
        if (pick_list == null)
            return;
        if (pick_list.style.display == "block")
            return;
        pick_list.style.display = "block";
    }
    switcMenu() {
        const pick_list = document.getElementById("pick_list");
        if (main_1.default.currentUser.currentRoom.state == RoomState_1.RoomState.GAME_ENDED || pick_list == null)
            return;
        if (pick_list.style.display == "block") {
            pick_list.style.display = "none";
            return;
        }
        pick_list.style.zIndex = this.state.zIndex;
        pick_list.style.display = "block";
    }
    renderAdmin(data) {
        const adminContent = document.getElementById("admin_content");
        if (adminContent == null)
            return;
        switch (data.category) {
            case "team": {
                adminContent.innerHTML = "";
                data.team.forEach((user) => {
                    const element = document.createElement("div");
                    element.classList.add("row");
                    const avatar = document.createElement("img");
                    avatar.src = main_1.default.resourceManager.resources["IMAGE_AVATAR_" + user.avatar].src;
                    avatar.classList.add("avatar");
                    element.appendChild(avatar);
                    const username = document.createElement("div");
                    username.classList.add("username");
                    username.textContent = user.username;
                    element.appendChild(username);
                    const rank = document.createElement("div");
                    rank.classList.add("value");
                    rank.classList.add(user.rank);
                    rank.textContent = main_1.default.languageManager.getValueForKey(`GAME_RANK_${user.rank.toUpperCase()}`);
                    element.appendChild(rank);
                    adminContent.appendChild(element);
                });
                break;
            }
            case "reports": {
                adminContent.innerHTML = `<div class="row info"><div style="width: 30%">${main_1.default.languageManager.getValueForKey("GAME_GENERAL_PLAYER")}</div><div style="width: 30%"">${main_1.default.languageManager.getValueForKey("GAME_GENERAL_BY_PLAYER")}</div><div style="width: 30%">${main_1.default.languageManager.getValueForKey("GAME_GENERAL_DATE")}</div><div class="value">${main_1.default.languageManager.getValueForKey("GAME_GENERAL_ACTION")}</div></div>`;
                data.reports.forEach((report) => {
                    const element = document.createElement("div");
                    element.classList.add("row");
                    const username = document.createElement("div");
                    username.style.width = "30%";
                    username.textContent = report.username;
                    element.appendChild(username);
                    const reported_username = document.createElement("div");
                    reported_username.style.width = "30%";
                    reported_username.textContent = report.reported_username;
                    element.appendChild(reported_username);
                    const date = document.createElement("div");
                    date.style.width = "30%";
                    date.textContent = report.date;
                    element.appendChild(date);
                    const action = document.createElement("div");
                    action.classList.add("value");
                    const chatLog = document.createElement("img");
                    chatLog.classList.add("icon");
                    chatLog.src = "assets/images/icons/chat.svg";
                    action.appendChild(chatLog);
                    chatLog.addEventListener("click", () => {
                        this.fetchAdminCategory("chatlogs", report.reported_username);
                    });
                    const deleteCross = document.createElement("img");
                    deleteCross.classList.add("icon");
                    deleteCross.src = "assets/images/icons/cross.svg";
                    action.appendChild(deleteCross);
                    deleteCross.addEventListener("click", () => {
                        main_1.default.webSocketsManager.sendMsg("deleteReport", report.id);
                    });
                    element.appendChild(action);
                    adminContent.appendChild(element);
                });
                break;
            }
            case "sanctions": {
                adminContent.innerHTML = `<div class="row info"><div style="width: 25%">${main_1.default.languageManager.getValueForKey("GAME_GENERAL_PLAYER")}</div><div style="width: 25%"">${main_1.default.languageManager.getValueForKey("GAME_GENERAL_BY_PLAYER")}</div><div style="width: 10%">${main_1.default.languageManager.getValueForKey("GAME_GENERAL_TYPE")}</div><div style="width: 30%">${main_1.default.languageManager.getValueForKey("GAME_GENERAL_EXPIRE")}</div><div class="value">${main_1.default.languageManager.getValueForKey("GAME_GENERAL_ACTION")}</div></div>`;
                data.sanctions.forEach((sanction) => {
                    const element = document.createElement("div");
                    element.classList.add("row");
                    const username = document.createElement("div");
                    username.style.width = "25%";
                    username.textContent = sanction.username;
                    element.appendChild(username);
                    const by_username = document.createElement("div");
                    by_username.style.width = "25%";
                    by_username.textContent = sanction.by_player;
                    element.appendChild(by_username);
                    const type = document.createElement("div");
                    type.style.width = "10%";
                    type.textContent = main_1.default.languageManager.getValueForKey(`GAME_ADMIN_SANCTION_${sanction.type.toUpperCase()}`);
                    element.appendChild(type);
                    const date = document.createElement("div");
                    date.style.width = "30%";
                    date.textContent = sanction.end_date;
                    element.appendChild(date);
                    const action = document.createElement("div");
                    action.classList.add("value");
                    const chatLog = document.createElement("img");
                    chatLog.classList.add("icon");
                    chatLog.src = "assets/images/icons/chat.svg";
                    action.appendChild(chatLog);
                    chatLog.addEventListener("click", () => {
                        this.fetchAdminCategory("chatlogs", sanction.username);
                    });
                    const deleteCross = document.createElement("img");
                    deleteCross.classList.add("icon");
                    deleteCross.src = "assets/images/icons/cross.svg";
                    action.appendChild(deleteCross);
                    deleteCross.addEventListener("click", () => {
                        main_1.default.webSocketsManager.sendMsg("deleteSanction", sanction.id);
                    });
                    element.appendChild(action);
                    adminContent.appendChild(element);
                });
                break;
            }
            case "chatlogs": {
                adminContent.innerHTML = ``;
                data.logs.forEach((log) => {
                    const element = document.createElement("div");
                    element.classList.add("row");
                    const message = document.createElement("div");
                    message.textContent = log;
                    element.appendChild(message);
                    adminContent.appendChild(element);
                });
                break;
            }
        }
    }
    renderAdminAlert(data) {
        const admin_alert = document.getElementById("admin_alert");
        if (admin_alert == null)
            return;
        if (data.error)
            admin_alert.classList.add("error");
        else
            admin_alert.classList.remove("error");
        admin_alert.textContent = main_1.default.languageManager.getValueForKey(data.message, data.args);
        admin_alert.style.display = "block";
    }
    setRank(e) {
        e.preventDefault();
        const username = document.getElementById("rankUsername"), rank = document.getElementById("rankValue");
        main_1.default.webSocketsManager.sendMsg("adminRank", { username: username.value, rank: rank.value });
    }
    newSanction(e) {
        e.preventDefault();
        const username = document.getElementById("sanctionUsername"), type = document.getElementById("sanctionType"), time = document.getElementById("sanctionTime"), reason = document.getElementById("sanctionReason");
        main_1.default.webSocketsManager.sendMsg("adminSanction", { username: username.value, type: type.value, time: time.value, reason: reason.value });
    }
    fetchAdminCategory(type, args) {
        const adminTitle = document.getElementById("admin_title"), adminContent = document.getElementById("admin_content");
        if (adminTitle == null || adminContent == null)
            return;
        adminTitle.innerText = main_1.default.languageManager.getValueForKey(`GAME_ADMIN_${type.toUpperCase()}`);
        adminContent.innerHTML = `<div class="loader"></div>`;
        switch (type) {
            case "team": {
                main_1.default.webSocketsManager.sendMsg("fetchAdmin", { key: "team" });
                break;
            }
            case "reports": {
                main_1.default.webSocketsManager.sendMsg("fetchAdmin", { key: "reports" });
                break;
            }
            case "chatlogs": {
                main_1.default.webSocketsManager.sendMsg("fetchAdmin", { key: "chatlogs", username: args });
                break;
            }
            case "sanctions": {
                main_1.default.webSocketsManager.sendMsg("fetchAdmin", { key: "sanctions" });
                break;
            }
            case "new_sanction": {
                adminContent.innerHTML = `<div id="admin_alert"></div><form id="adminSanctionForm"><input type="text" id="sanctionUsername" placeholder="${main_1.default.languageManager.getValueForKey("ACCOUNT_USERNAME")}"/><select id="sanctionType"><option value="mute">${main_1.default.languageManager.getValueForKey("GAME_ADMIN_SANCTION_MUTE")}</option><option value="ban">${main_1.default.languageManager.getValueForKey("GAME_ADMIN_SANCTION_BAN")}</option></select><input type="text" id="sanctionTime" placeholder="${main_1.default.languageManager.getValueForKey("GAME_ADMIN_SANCTION_TIME")}"/><input type="text" id="sanctionReason" placeholder="${main_1.default.languageManager.getValueForKey("GAME_ADMIN_SANCTION_REASON")}" maxlength="150"/><input type="submit" value="${main_1.default.languageManager.getValueForKey("GAME_GENERAL_VALIDATE")}"></form>`;
                if (args != null && args.username != null) {
                    const usernameInput = document.getElementById("sanctionUsername");
                    if (usernameInput != null)
                        usernameInput.value = args.username;
                }
                if (args != null && args.type != null) {
                    const typeSelect = document.getElementById("sanctionType");
                    if (typeSelect != null)
                        typeSelect.value = args.type;
                }
                const form = document.getElementById("adminSanctionForm");
                if (form != null)
                    form.addEventListener("submit", this.newSanction);
                break;
            }
            case "rank": {
                adminContent.innerHTML = `<div id="admin_alert"></div><form id="adminRankForm"><input type="text" id="rankUsername" placeholder="${main_1.default.languageManager.getValueForKey("ACCOUNT_USERNAME")}"/><select id="rankValue"></select><input type="submit" value="${main_1.default.languageManager.getValueForKey("GAME_GENERAL_VALIDATE")}"></form>`;
                const rankValue = document.getElementById("rankValue");
                ["owner", "manager", "admin", "mod", "vip", "user"].forEach((rank) => {
                    const option = document.createElement("option");
                    option.value = rank;
                    option.textContent = main_1.default.languageManager.getValueForKey(`GAME_RANK_${rank.toUpperCase()}`);
                    rankValue === null || rankValue === void 0 ? void 0 : rankValue.appendChild(option);
                });
                const form = document.getElementById("adminRankForm");
                if (form != null)
                    form.addEventListener("submit", this.setRank);
                break;
            }
        }
    }
    setAdminCategory(e) {
        this.switchAdmin(e.srcElement.getAttribute("type"));
    }
    switchAdmin(type = null, args = null) {
        if (main_1.default.currentUser == null || ["user", "vip"].includes(main_1.default.currentUser.rank))
            return;
        const admin = document.getElementById("admin"), admin_menu = document.getElementById("admin_menu");
        if (admin == null || admin_menu == null)
            return;
        if (!type && admin.style.display == "block") {
            admin.style.display = "none";
            return;
        }
        if (type == null)
            type = "team";
        Array.from(admin_menu.getElementsByTagName("li")).forEach((el) => {
            if (el.getAttribute("type") == "rank" && !["owner", "manager"].includes(main_1.default.currentUser.rank))
                el.style.display = "none";
            if (el.getAttribute("type") == type)
                el.classList.add("active");
            else
                el.classList.remove("active");
        });
        this.fetchAdminCategory(type, args);
        admin.style.zIndex = this.state.zIndex;
        admin.style.display = "block";
    }
    switchLeaderboard() {
        if (main_1.default.currentUser == null)
            return;
        const leaderboard = document.getElementById("leaderboard"), leaderboardFilter = document.getElementById("leaderboardFilter");
        if (leaderboard == null || leaderboardFilter == null)
            return;
        if (leaderboard.style.display == "block") {
            leaderboard.style.display = "none";
            return;
        }
        if (leaderboardFilter.value.length == 0) {
            const availablesStats = ["elo", "level_xp", "games_played", "games_won", "games_lost", "win_rate", "best_streak", "shots", "shots_per_match", "goals", "goals_per_match", "hat_tricks", "assists", "assists_per_match", "saves", "saves_per_match", "pass_accuracy", "pass_per_match", "played_gk", "cs", "cs_percentage"];
            availablesStats.forEach((stat) => {
                const option = document.createElement("option");
                option.value = stat;
                option.textContent = main_1.default.languageManager.getValueForKey(`GAME_STATS_${stat.toUpperCase()}`);
                leaderboardFilter.appendChild(option);
            });
            this.fetchLeaderboard(availablesStats[0]);
        }
        else
            this.fetchLeaderboard(leaderboardFilter.value);
        leaderboard.style.zIndex = this.state.zIndex;
        leaderboard.style.display = "block";
    }
    switchSettings() {
        if (main_1.default.currentUser == null)
            return;
        const settings = document.getElementById("settings");
        if (settings == null)
            return;
        if (settings.style.display == "block") {
            settings.style.display = "none";
            return;
        }
        this.reloadSettings();
        settings.style.zIndex = this.state.zIndex;
        settings.style.display = "block";
    }
    reloadFriends() {
        const friendsList = document.getElementById("friendsList");
        if (main_1.default.currentUser == null || main_1.default.currentUser.friends == null || friendsList == null)
            return;
        friendsList.innerHTML = "";
        let count = 0;
        main_1.default.currentUser.friends.forEach((friend) => {
            var _a;
            count++;
            const div = document.createElement("div");
            div.classList.add("row");
            if (friend.online)
                div.classList.add("online");
            const user = document.createElement("div");
            user.classList.add("user");
            user.innerText = friend.username;
            if (friend.serverRegion != null) {
                const image = document.createElement("img");
                image.src = `assets/images/flags/region/${this.getRegionFlag(friend.serverRegion.region)}.svg`;
                user.prepend(image);
            }
            div.appendChild(user);
            const action = document.createElement("div");
            action.classList.add("action");
            if (friend.online) {
                const whisper = document.createElement("img");
                whisper.src = "assets/images/icons/chat.svg";
                whisper.addEventListener("click", () => this.whisper(friend.username));
                action.appendChild(whisper);
            }
            if (friend.serverRegion != null && friend.serverRegion.region == ((_a = main_1.default.currentUser) === null || _a === void 0 ? void 0 : _a.currentServer) && friend.serverRegion.currentRoom != null) {
                const join = document.createElement("img");
                join.setAttribute("room", friend.serverRegion.currentRoom);
                join.src = "assets/images/icons/chev_right.svg";
                action.appendChild(join);
            }
            const deleteFriend = document.createElement("img");
            deleteFriend.src = "assets/images/icons/cross.svg";
            deleteFriend.addEventListener("click", () => main_1.default.webSocketsManager.sendMsg("deleteFriend", friend.id));
            action.appendChild(deleteFriend);
            div.appendChild(action);
            friendsList.appendChild(div);
        });
        if (count == 0)
            friendsList.innerText = main_1.default.languageManager.getValueForKey("GAME_FRIENDS_NONE");
    }
    switchFriends() {
        if (main_1.default.currentUser == null)
            return;
        const friends = document.getElementById("friends");
        if (friends == null)
            return;
        if (friends.style.display == "block") {
            friends.style.display = "none";
            return;
        }
        this.reloadFriends();
        friends.style.zIndex = this.state.zIndex;
        friends.style.display = "block";
    }
    switchShop() {
        const shop = document.getElementById("shop");
        if (shop == null)
            return;
        if (shop.style.display == "block") {
            shop.style.display = "none";
            return;
        }
        shop.style.zIndex = this.state.zIndex;
        main_1.default.webSocketsManager.sendMsg("fetchShop");
    }
    fetchItemForCategory(e) {
        main_1.default.webSocketsManager.sendMsg("fetchItems", e.srcElement.value);
        const shopItems = document.getElementById("shopItems");
        if (shopItems == null)
            return;
        shopItems.innerHTML = "";
    }
    shopData(shopData) {
        const shop = document.getElementById("shop"), shopCoinVal = document.getElementById("shopCoinVal"), shopCategorys = document.getElementById("shopCategorys");
        if (shop == null || shopCoinVal == null || shopCategorys == null)
            return;
        if (main_1.default.currentUser != null)
            shopCoinVal.textContent = main_1.default.currentUser.coins.toString();
        shopCategorys.innerHTML = "";
        shopData.categorys.forEach((category, index) => {
            const div = document.createElement("div");
            const input = document.createElement("input");
            input.type = "radio";
            input.name = "SHOP_CATEGORY";
            input.id = category.name;
            input.value = category.name;
            input.addEventListener("click", this.fetchItemForCategory.bind(this));
            if (index == 0)
                input.checked = true;
            div.appendChild(input);
            const label = document.createElement("label");
            label.setAttribute("for", category.name);
            label.textContent = main_1.default.languageManager.getValueForKey("GAME_" + category.name);
            div.appendChild(label);
            shopCategorys.appendChild(div);
        });
        this.shopDataItems(shopData.items);
        shop.style.display = "block";
    }
    refreshShop() {
        const shop = document.getElementById("shop"), shopCoinVal = document.getElementById("shopCoinVal"), shopItems = document.getElementById("shopItems");
        if (shopCoinVal == null || shopItems == null || shop == null || shop.style.display == "none")
            return;
        if (main_1.default.currentUser != null)
            shopCoinVal.textContent = main_1.default.currentUser.coins.toString();
        Array.from(shopItems.getElementsByTagName("div")).filter((element) => element.classList.contains("row")).forEach((element, index) => {
            var _a, _b;
            element.className = 'row';
            const item_id = element.getAttribute("item_id"), price = element.getAttribute("price");
            const span = element.getElementsByTagName("span")[0];
            if (item_id == null || price == null || span == null)
                return;
            if (((_a = main_1.default.currentUser) === null || _a === void 0 ? void 0 : _a.avatar) == parseInt(item_id)) {
                element.classList.add("equiped");
                span.textContent = main_1.default.languageManager.getValueForKey("GAME_SHOP_EQUIPED");
            }
            else if ((_b = main_1.default.currentUser) === null || _b === void 0 ? void 0 : _b.items.includes(parseInt(item_id))) {
                span.textContent = main_1.default.languageManager.getValueForKey("GAME_SHOP_EQUIP");
            }
            else {
                if (main_1.default.currentUser != null && main_1.default.currentUser.coins < parseInt(price))
                    element.classList.add("cant_buy");
            }
        });
    }
    shopDataItems(items) {
        const shopItems = document.getElementById("shopItems");
        if (shopItems == null)
            return;
        shopItems.innerHTML = "";
        items.forEach((item) => {
            var _a, _b;
            const div = document.createElement("div");
            div.classList.add("row");
            div.setAttribute("item_id", item.id);
            div.setAttribute("price", item.price);
            const image = main_1.default.resourceManager.resources["IMAGE_AVATAR_" + item.id];
            if (image == null)
                return;
            const imageElement = document.createElement("img");
            imageElement.classList.add("item");
            imageElement.src = image.src;
            div.appendChild(imageElement);
            const action = document.createElement("div");
            action.classList.add("action");
            action.addEventListener("click", () => main_1.default.webSocketsManager.sendMsg("toggleItem", item.id));
            const span = document.createElement("span");
            if (((_a = main_1.default.currentUser) === null || _a === void 0 ? void 0 : _a.avatar) == item.id) {
                div.classList.add("equiped");
                span.textContent = main_1.default.languageManager.getValueForKey("GAME_SHOP_EQUIPED");
            }
            else if ((_b = main_1.default.currentUser) === null || _b === void 0 ? void 0 : _b.items.includes(item.id)) {
                span.textContent = main_1.default.languageManager.getValueForKey("GAME_SHOP_EQUIP");
            }
            else {
                if (main_1.default.currentUser != null && main_1.default.currentUser.coins < item.price)
                    div.classList.add("cant_buy");
                span.innerHTML = '<img src="assets/images/icons/coin.png"> ' + item.price;
            }
            action.appendChild(span);
            div.appendChild(action);
            shopItems.appendChild(div);
        });
    }
    sendChat(e) {
        e.preventDefault();
        const chatCategory = document.getElementById("msgType"), chatMsg = document.getElementById("chatMsg");
        if (chatCategory == null || chatCategory.value.length == 0 || chatMsg == null || chatMsg.value.length == 0)
            return;
        main_1.default.webSocketsManager.sendMsg("newChat", { type: chatCategory.value, message: chatMsg.value });
        chatMsg.value = "";
    }
    keyDownHandler(e) {
        if (this.state.canvas == null || this.state.ctx == null || main_1.default.currentUser == null || main_1.default.currentUser.currentRoom == null || main_1.default.currentUser.currentRoom.stadium == null)
            return;
        const inputChat = document.getElementById("chatMsg");
        if (inputChat == null)
            return;
        if (this.state.settings_record_input && inputChat != document.activeElement) {
            main_1.default.settingsManager.setSettings("inputs", this.state.settings_record_input, e.code);
            this.state.settings_record_input = null;
            this.reloadSettings();
            return;
        }
        if (e.code.startsWith("Digit") && inputChat != document.activeElement) {
            const zoom = [1, 1.25, 1.5, 1.75, 2, 2.25, 2.5];
            const zoomLevel = parseInt(e.code.replace("Digit", ""));
            if (zoom[zoomLevel - 1] != null) {
                main_1.default.settingsManager.setSettings("graphics", "zoom", zoom[zoomLevel - 1]);
                this.reloadSettings();
            }
            return;
        }
        if (e.code == "KeyP" && inputChat != document.activeElement) {
            const server = main_1.default.regionServerManager.getServerById(main_1.default.currentUser.currentServer);
            if (server != null)
                server.sendMsg("pause");
            return;
        }
        if (main_1.default.settingsManager.inputs.right.includes(e.code))
            this.state.inputs.right = true;
        if (main_1.default.settingsManager.inputs.left.includes(e.code))
            this.state.inputs.left = true;
        if (main_1.default.settingsManager.inputs.up.includes(e.code))
            this.state.inputs.up = true;
        if (main_1.default.settingsManager.inputs.down.includes(e.code))
            this.state.inputs.down = true;
        if (main_1.default.settingsManager.inputs.kick.includes(e.code))
            this.state.inputs.kick = true;
        if (inputChat === document.activeElement) {
            this.state.inputs.up = false;
            this.state.inputs.down = false;
            this.state.inputs.left = false;
            this.state.inputs.right = false;
            this.state.inputs.kick = false;
        }
        const server = main_1.default.regionServerManager.getServerById(main_1.default.currentUser.currentServer);
        if (server != null)
            server.sendMsg("inputs", this.state.inputs);
        if (main_1.default.settingsManager.inputs.toggle_chat.includes(e.code)) {
            if ((inputChat === document.activeElement))
                setTimeout(() => this.state.canvas.focus(), 1);
            else {
                setTimeout(() => inputChat.focus(), 1);
            }
        }
    }
    KeyUpHandler(e) {
        if (this.state.canvas == null || this.state.ctx == null || main_1.default.currentUser == null || main_1.default.currentUser.currentRoom == null || main_1.default.currentUser.currentRoom.stadium == null)
            return;
        if (main_1.default.settingsManager.inputs.right.includes(e.code))
            this.state.inputs.right = false;
        if (main_1.default.settingsManager.inputs.left.includes(e.code))
            this.state.inputs.left = false;
        if (main_1.default.settingsManager.inputs.up.includes(e.code))
            this.state.inputs.up = false;
        if (main_1.default.settingsManager.inputs.down.includes(e.code))
            this.state.inputs.down = false;
        if (main_1.default.settingsManager.inputs.kick.includes(e.code))
            this.state.inputs.kick = false;
        const server = main_1.default.regionServerManager.getServerById(main_1.default.currentUser.currentServer);
        if (server != null)
            server.sendMsg("inputs", this.state.inputs);
    }
    onDestroy() {
        super.onDestroy();
        const chatForm = document.getElementById("chatForm");
        chatForm === null || chatForm === void 0 ? void 0 : chatForm.removeEventListener("chatForm", this.sendChat.bind(this), false);
        document.removeEventListener('keydown', this.keyDownHandler.bind(this), false);
        document.removeEventListener('keyup', this.KeyUpHandler.bind(this), false);
    }
    fmtMSS(s) {
        return (s - (s %= 60)) / 60 + (9 < s ? ':' : ':0') + s;
    }
    updateAvatar() {
        var _a;
        this.refreshShop();
        const avatar = document.getElementById("avatar");
        if (avatar == null)
            return;
        avatar.src = main_1.default.resourceManager.resources["IMAGE_AVATAR_" + ((_a = main_1.default.currentUser) === null || _a === void 0 ? void 0 : _a.avatar)].src;
    }
    initRoom(room) {
        const roomName = document.getElementById("roomName");
        if (roomName != null)
            roomName.textContent = room.id;
        const playersCount = document.getElementById("playersCount");
        if (playersCount != null)
            playersCount.textContent = room.currentPlayers.length.toString();
        this.updateScoreData(room.score);
        const list_users = document.getElementById("list_users");
        if (list_users != null)
            list_users.innerHTML = "";
        room.currentPlayers.forEach((player) => {
            const li = document.createElement("li");
            li.dataset.userId = player.id.toString();
            li.setAttribute("username", player.username);
            li.innerHTML = `${player.username} <span>${player.ping.toString()}</span>`;
            if (player.team.id == Team_1.default.RED.id)
                li.classList.add("red");
            else if (player.team.id == Team_1.default.BLUE.id)
                li.classList.add("blue");
            if (list_users != null)
                list_users.appendChild(li);
            li.addEventListener("click", this.showUserMenu.bind(this));
        });
        room.history.forEach((history) => this.addHistory(history));
        this.refreshPickList();
    }
    update(room) {
        this.updateScoreData(room.score);
        const list_users = document.getElementById("list_users");
        if (list_users != null) {
            room.currentPlayers.forEach((player) => {
                list_users.querySelectorAll("li").forEach(element => {
                    if (element.dataset.userId == player.id.toString()) {
                        if (player.team.id == Team_1.default.RED.id) {
                            if (element.classList.contains("blue"))
                                element.classList.remove("blue");
                            if (!element.classList.contains("red"))
                                element.classList.add("red");
                        }
                        else if (player.team.id == Team_1.default.BLUE.id) {
                            if (element.classList.contains("red"))
                                element.classList.remove("red");
                            if (!element.classList.contains("blue"))
                                element.classList.add("blue");
                        }
                        else if (element.classList.contains("red") || element.classList.contains("blue"))
                            element.classList.remove(...["red", "blue"]);
                        const ping = element.getElementsByTagName("span")[0];
                        if (ping != null && ping.textContent != player.ping.toString())
                            ping.textContent = player.ping.toString();
                    }
                });
            });
        }
    }
    setCameraFollow() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        let centerX, centerY;
        const playerDisc = (_b = (_a = main_1.default.currentUser) === null || _a === void 0 ? void 0 : _a.currentRoom) === null || _b === void 0 ? void 0 : _b.stadium.discs.filter((disc) => disc.player == main_1.default.currentUser.id)[0], ball = (_d = (_c = main_1.default.currentUser) === null || _c === void 0 ? void 0 : _c.currentRoom) === null || _d === void 0 ? void 0 : _d.stadium.discs[0];
        if (ball == null) {
            this.state.camera_follow = { x: 0, y: 0 };
            return;
        }
        const bottomContainerHeight = 160;
        centerX = (_f = (_e = main_1.default.currentUser) === null || _e === void 0 ? void 0 : _e.currentRoom) === null || _f === void 0 ? void 0 : _f.stadium.discs[0].x;
        centerY = (((_h = (_g = main_1.default.currentUser) === null || _g === void 0 ? void 0 : _g.currentRoom) === null || _h === void 0 ? void 0 : _h.stadium.discs[0].y) + bottomContainerHeight);
        if (playerDisc != null) {
            centerX = 0.5 * (centerX + playerDisc.x);
            centerY = 0.5 * (centerY + playerDisc.y);
            const midX = 0.5 * this.state.canvas.width, midY = 0.5 * this.state.canvas.height;
            const infX = playerDisc.x - midX + 50, infY = playerDisc.y - midY + 50, supX = playerDisc.x + midX - 50, supY = playerDisc.y + midY - 50;
            centerX = centerX > supX ? supX : centerX < infX ? infX : centerX;
            centerY = centerY > supY ? supY : centerY < infY ? infY : centerY;
        }
        let frames = 60 * (1 / this.state.fps);
        if (frames > 1)
            frames = 1;
        const smoothingRatio = 0.04;
        frames *= smoothingRatio;
        this.state.cameraFollow.x += (centerX - this.state.cameraFollow.x) * frames;
        this.state.cameraFollow.y += (centerY - this.state.cameraFollow.y) * frames;
        const room = main_1.default.currentUser.currentRoom;
        const margin = 125, canvasHeight = this.state.canvas.height - bottomContainerHeight, stadiumWidth = room.stadium.width + margin, stadiumHeight = room.stadium.height + margin;
        if (this.state.canvas.width > 2 * stadiumWidth) {
            this.state.cameraFollow.x = 0;
        }
        else if (this.state.cameraFollow.x + 0.5 * this.state.canvas.width > stadiumWidth) {
            this.state.cameraFollow.x = stadiumWidth - 0.5 * this.state.canvas.width;
        }
        else if (this.state.cameraFollow.x - 0.5 * this.state.canvas.width < -stadiumWidth) {
            this.state.cameraFollow.x = -stadiumWidth + 0.5 * this.state.canvas.width;
        }
        if (canvasHeight > 2 * stadiumHeight) {
            this.state.cameraFollow.y = 0;
        }
        else if (this.state.cameraFollow.y + 0.5 * canvasHeight > stadiumHeight) {
            this.state.cameraFollow.y = stadiumHeight - 0.5 * canvasHeight;
        }
        else if (this.state.cameraFollow.y - 0.5 * canvasHeight < -stadiumHeight) {
            this.state.cameraFollow.y = -stadiumHeight + 0.5 * canvasHeight;
        }
    }
    renderNotif(dt) {
        if (main_1.default.currentUser == null || main_1.default.currentUser.currentRoom == null)
            return;
        const notif = document.getElementById("notif");
        if (notif == null)
            return;
        switch (main_1.default.currentUser.currentRoom.state) {
            case RoomState_1.RoomState.PAUSE: {
                this.state.canvas.classList.add("pause");
                notif.innerHTML = `${main_1.default.languageManager.getValueForKey("GAME_GENERAL_PAUSE")}`;
                if (notif.style.display == "none")
                    notif.style.display = "block";
                break;
            }
            case RoomState_1.RoomState.UNPAUSE: {
                // TODO PLAYER JOIN ON UNPAUSE
                this.state.unpauseInterval -= (dt * 1000);
                this.state.canvas.classList.add("pause");
                notif.innerHTML = `${main_1.default.languageManager.getValueForKey("GAME_GENERAL_PAUSE")} <div id='pause' style='width: ${this.state.unpauseInterval * 100 / 3000}%'></div>`;
                if (notif.style.display == "none")
                    notif.style.display = "block";
                break;
            }
            case RoomState_1.RoomState.GOAL_SCORE: {
                if (notif.style.display == "none")
                    notif.style.display = "block";
                break;
            }
            default: {
                if (this.state.canvas.classList.length > 0)
                    this.state.canvas.classList = "";
                if (notif.style.display == "block")
                    notif.style.display = "none";
                notif.innerHTML = "";
                break;
            }
        }
    }
    renderGame(dt) {
        var _a, _b, _c, _d;
        if (this.state.canvas == null || this.state.ctx == null || main_1.default.currentUser == null || main_1.default.currentUser.currentRoom == null || main_1.default.currentUser.currentRoom.stadium == null)
            return;
        if (main_1.default.currentUser.currentRoom.state == RoomState_1.RoomState.GAME_ENDED) {
            this.state.ctx.setTransform(1, 0, 0, 1, 0, 0);
            this.state.ctx.clearRect(0, 0, this.state.canvas_rect[2] - this.state.canvas_rect[0], this.state.canvas_rect[3] - this.state.canvas_rect[1]);
            this.renderNotif(dt);
            this.showMenu();
            return;
        }
        this.resize_canvas();
        this.renderNotif(dt);
        this.state.ctx.setTransform(1, 0, 0, 1, 0, 0);
        this.state.ctx.clearRect(0, 0, this.state.canvas_rect[2] - this.state.canvas_rect[0], this.state.canvas_rect[3] - this.state.canvas_rect[1]);
        this.setCameraFollow();
        this.state.ctx.translate(-this.state.canvas_rect[0], -this.state.canvas_rect[1]);
        this.state.ctx.scale(window.devicePixelRatio * main_1.default.settingsManager.graphics.zoom, window.devicePixelRatio * main_1.default.settingsManager.graphics.zoom);
        this.state.ctx.translate(-this.state.cameraFollow.x, -this.state.cameraFollow.y);
        this.renderbg(main_1.default.currentUser.currentRoom.stadium, this.state.ctx);
        main_1.default.currentUser.currentRoom.stadium.segments.forEach((segment) => {
            if (segment.vis) {
                this.state.ctx.beginPath();
                this.state.ctx.lineWidth = 3;
                this.state.ctx.strokeStyle = this.color_to_style(segment.color, Base_1.Base.segment_color);
                var segV0 = segment.v0;
                var segV1 = segment.v1;
                if (segment.curveF === undefined) {
                    this.state.ctx.moveTo(segV0[0], segV0[1]);
                    this.state.ctx.lineTo(segV1[0], segV1[1]);
                }
                else {
                    var segCC = segment.circleCenter;
                    var pos_x = segV0[0] - segCC[0];
                    var pos_y = segV0[1] - segCC[1];
                    this.state.ctx.arc(segCC[0], segCC[1], Math.sqrt(pos_x * pos_x + pos_y * pos_y), Math.atan2(pos_y, pos_x), Math.atan2(segV1[1] - segCC[1], segV1[0] - segCC[0]));
                }
                this.state.ctx.stroke();
            }
        });
        const now = performance.now();
        const renderTimestamp = now - (0.016666666666666666) + (((_d = (_b = (_a = main_1.default === null || main_1.default === void 0 ? void 0 : main_1.default.currentUser) === null || _a === void 0 ? void 0 : _a.currentRoom) === null || _b === void 0 ? void 0 : _b.getPlayer((_c = main_1.default === null || main_1.default === void 0 ? void 0 : main_1.default.currentUser) === null || _c === void 0 ? void 0 : _c.id)) === null || _d === void 0 ? void 0 : _d.ping) || 0);
        main_1.default.currentUser.currentRoom.stadium.discs.forEach((disc, i) => {
            var _a, _b;
            const buffer = (_b = (_a = main_1.default.currentUser) === null || _a === void 0 ? void 0 : _a.currentRoom) === null || _b === void 0 ? void 0 : _b.discHistory[i];
            if (buffer != null) {
                while (buffer.length >= 2 && buffer[1].timestamp <= renderTimestamp)
                    buffer.shift();
                if (buffer.length >= 2 && buffer[0].timestamp <= renderTimestamp && renderTimestamp <= buffer[1].timestamp) {
                    disc.x = this.interpolate(buffer[0].shareableData.x, buffer[1].shareableData.x, buffer[0].timestamp, buffer[1].timestamp, renderTimestamp);
                    disc.y = this.interpolate(buffer[0].shareableData.y, buffer[1].shareableData.y, buffer[0].timestamp, buffer[1].timestamp, renderTimestamp);
                }
            }
        });
        const myDisc = main_1.default.currentUser.currentRoom.stadium.discs.filter((disc) => disc.player == main_1.default.currentUser.id);
        if (myDisc[0] != null)
            this.drawPlayerDiscExtLine(myDisc[0]);
        main_1.default.currentUser.currentRoom.stadium.discs.forEach((disc, i) => {
            this.state.ctx.beginPath();
            this.state.ctx.arc(disc.x, disc.y, disc.radius, 0, Math.PI * 2, true);
            if (disc.player != null && disc.player != 0 && disc.player != main_1.default.currentUser.id) {
                const player = main_1.default.currentUser.currentRoom.currentPlayers.filter((p) => p.id == disc.player)[0];
                if (player != null)
                    this.drawUsername(player.username, disc, player.team.id);
            }
            if (disc.kick)
                this.state.ctx.strokeStyle = 'rgb(255,255,255)';
            else
                this.state.ctx.strokeStyle = 'rgb(0,0,0)';
            this.state.ctx.lineWidth = 2;
            if (disc.avatar != null && disc.avatar != 0) {
                this.state.ctx.save();
                this.state.ctx.clip();
                this.state.ctx.drawImage(main_1.default.resourceManager.resources["IMAGE_AVATAR_" + disc.avatar], disc.x - disc.radius, disc.y - disc.radius, disc.radius * 2, disc.radius * 2);
                this.state.ctx.restore();
            }
            else {
                this.state.ctx.fillStyle = this.color_to_style(disc.color, Base_1.Base.discPhysics.color);
                this.state.ctx.fill();
            }
            this.state.ctx.stroke();
        });
    }
    drawUsername(username, disc, team) {
        this.state.ctx.font = '12px sans-serif';
        const text = this.state.ctx.measureText(username);
        this.state.ctx.fillStyle = 'black';
        this.state.ctx.strokeText(username, disc.x - (text.width / 2), disc.y + disc.radius + 15);
        if (team == Team_1.default.RED.id)
            this.state.ctx.fillStyle = '#bd3838';
        else if (team == Team_1.default.BLUE.id)
            this.state.ctx.fillStyle = '#bd3838';
        else
            this.state.ctx.fillStyle = "white";
        this.state.ctx.globalAlpha = 0.8;
        this.state.ctx.fillText(username, disc.x - (text.width / 2), disc.y + disc.radius + 15);
        this.state.ctx.globalAlpha = 1;
    }
    drawPlayerDiscExtLine(disc) {
        this.state.ctx.beginPath();
        this.state.ctx.lineWidth = 3;
        this.state.ctx.strokeStyle = 'white';
        this.state.ctx.globalAlpha = 0.3;
        this.state.ctx.arc(disc.x, disc.y, disc.radius + 10, 0, 2 * Math.PI, false);
        this.state.ctx.stroke();
        this.state.ctx.globalAlpha = 1;
    }
    interpolate(p0, p1, t0, t1, renderTimestamp) {
        const deltaMovement = (p1 - p0);
        return p0 + deltaMovement * (renderTimestamp - t0) / (t1 - t0);
    }
    resize_canvas() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var rect = [-((_b = (_a = main_1.default.currentUser) === null || _a === void 0 ? void 0 : _a.currentRoom) === null || _b === void 0 ? void 0 : _b.stadium.width), -((_d = (_c = main_1.default.currentUser) === null || _c === void 0 ? void 0 : _c.currentRoom) === null || _d === void 0 ? void 0 : _d.stadium.height), (_f = (_e = main_1.default.currentUser) === null || _e === void 0 ? void 0 : _e.currentRoom) === null || _f === void 0 ? void 0 : _f.stadium.width, (_h = (_g = main_1.default.currentUser) === null || _g === void 0 ? void 0 : _g.currentRoom) === null || _h === void 0 ? void 0 : _h.stadium.height];
        var consider = function (pt, r) {
            var x = pt[0];
            var y = pt[1];
            if (x - r < rect[0])
                rect[0] = x - r;
            if (y - r < rect[1])
                rect[1] = y - r;
            if (x + r > rect[2])
                rect[2] = x + r;
            if (y + r > rect[3])
                rect[3] = y + r;
        };
        this.for_all_shapes((_k = (_j = main_1.default.currentUser) === null || _j === void 0 ? void 0 : _j.currentRoom) === null || _k === void 0 ? void 0 : _k.stadium, function (shape) {
            var o = shape.object;
            switch (shape.type) {
                case 'vertexes':
                    consider([o.x, o.y], 0);
                    break;
                case 'goals':
                    consider(o.p0, 0);
                    consider(o.p1, 0);
                    break;
                case 'discs':
                    consider([o.x, o.y], o.radius);
                    break;
            }
        });
        var canvas_div_size = [this.state.canvas.clientWidth, this.state.canvas.clientHeight];
        rect = [
            Math.round(Math.min(rect[0] - 0, -canvas_div_size[0] / 2)),
            Math.round(Math.min(rect[1] - 0, -canvas_div_size[1] / 2)),
            Math.round(Math.max(rect[2] + 0, canvas_div_size[0] / 2)),
            Math.round(Math.max(rect[3] + 0, canvas_div_size[1] / 2)),
        ];
        this.state.canvas_rect = rect;
        this.state.canvas.width = document.body.offsetWidth;
        this.state.canvas.height = document.body.offsetHeight;
    }
    for_all_shapes(st, types, f = null) {
        if (!f) {
            f = types;
            types = ['vertexes', 'segments', 'goals', 'discs', 'planes'];
        }
        types.forEach((name) => {
            var group = st[name];
            if (group) {
                group.forEach((obj, i) => {
                    return f(this.Shape(name, obj, i));
                });
            }
        });
    }
    Shape(type, object, i) {
        return { type: type, object: object, index: i };
    }
    renderbg(stadium, ctx) {
        var bg = stadium.bg;
        ctx.save();
        if (bg.type == 'grass' || bg.type == 'hockey') {
            if (bg.type == 'grass')
                this.state.canvas.style.backgroundColor = Base_1.Base["grass"].bg_color;
            else
                this.state.canvas.style.backgroundColor = Base_1.Base["hockey"].bg_color;
            ctx.beginPath();
            ctx.moveTo(-bg.width + bg.cornerRadius, -bg.height);
            // TODO: Left border is wrong
            ctx.arcTo(bg.width, -bg.height, bg.width, -bg.height + bg.cornerRadius, bg.cornerRadius);
            ctx.arcTo(bg.width, bg.height, bg.width - bg.cornerRadius, bg.height, bg.cornerRadius);
            ctx.arcTo(-bg.width, bg.height, -bg.width, bg.height - bg.cornerRadius, bg.cornerRadius);
            ctx.arcTo(-bg.width, -bg.height, -bg.width + bg.cornerRadius, -bg.height, bg.cornerRadius);
            ctx.save();
            ctx.clip();
            ctx.translate(40, 40);
            ctx.fillStyle = this.state.ctx.createPattern(main_1.default.resourceManager.resources[`IMAGE_TILE_${bg.type.toUpperCase()}`], null);
            ;
            ctx.fillRect(-stadium.width - 50, -stadium.height - 50, 2 * stadium.width - 40, 2 * stadium.height - 20);
            ctx.restore();
            ctx.moveTo(0, -bg.height);
            ctx.lineTo(0, bg.height);
            ctx.moveTo(bg.kickOffRadius, 0);
            ctx.arc(0, 0, bg.kickOffRadius, 0, Math.PI * 2, true);
            ctx.lineWidth = 3;
            ctx.strokeStyle = Base_1.Base["grass"].border_color;
            ctx.stroke();
        }
        else if (bg.type == '' && bg.color != undefined) {
            ctx.fillStyle = this.color_to_style(bg.color);
            ctx.fillRect(-stadium.width, -stadium.height, 2 * stadium.width, 2 * stadium.height);
            this.state.canvas.style.background = this.color_to_style(bg.color);
        }
        else
            this.state.canvas.style.backgroundColor = Base_1.Base["grass"].bg_color;
        ctx.restore();
    }
    color_to_style(color, def = null) {
        if (!color) {
            return def ? def : 'rgb(0,0,0)';
        }
        else if (color.substr) {
            return '#' + color;
        }
        else {
            return 'rgb(' + color[0] + ',' + color[1] + ',' + color[2] + ')';
        }
    }
    updateScoreData(score) {
        const scoreRed = document.getElementById("scoreRed");
        if (scoreRed != null)
            scoreRed.textContent = score.red.toString();
        const scoreBlue = document.getElementById("scoreBlue");
        if (scoreBlue != null)
            scoreBlue.textContent = score.blue.toString();
        const time = document.getElementById("time"), overtime = document.getElementById("overtime");
        if (time != null && overtime != null) {
            const room = main_1.default.currentUser.currentRoom;
            if (room.score.timeLimit > 0 && Math.floor(score.time) + 30 > room.score.timeLimit * 60)
                time.classList.add("warning");
            else
                time.classList.remove("warning");
            if (room.score.timeLimit > 0 && Math.floor(score.time) > room.score.timeLimit * 60)
                overtime.style.display = "block";
            else
                overtime.style.display = "none";
            time.textContent = this.fmtMSS(Math.floor(score.time));
        }
    }
    drop(ev) {
        ev.preventDefault();
        const data = ev.dataTransfer.getData("text");
        const target = ev.target;
        const server = main_1.default.regionServerManager.getServerById(main_1.default.currentUser.currentServer);
        if (server == null)
            return;
        switch (ev.target.getAttribute("id")) {
            case "pick_list_red": {
                server.sendMsg("setTeamPlayer", { playerId: parseInt(data), team: Team_1.default.RED.id });
                break;
            }
            case "pick_list_blue": {
                server.sendMsg("setTeamPlayer", { playerId: parseInt(data), team: Team_1.default.BLUE.id });
                break;
            }
            default: {
                server.sendMsg("setTeamPlayer", { playerId: parseInt(data), team: Team_1.default.SPECTATORS.id });
                break;
            }
        }
    }
    startDrag(ev) {
        ev.dataTransfer.setData("text", ev.target.getAttribute("player_id"));
    }
    refreshPickList() {
        var _a, _b;
        const pick_list = document.getElementById("pick_list"), pick_list_red = document.getElementById("pick_list_red"), pick_list_blue = document.getElementById("pick_list_blue"), pick_list_spectators = document.getElementById("pick_list_spectators");
        if (pick_list == null || pick_list_red == null || pick_list_blue == null || pick_list_spectators == null)
            return;
        pick_list_red.innerHTML = "";
        pick_list_blue.innerHTML = "";
        pick_list_spectators.innerHTML = "";
        (_b = (_a = main_1.default.currentUser) === null || _a === void 0 ? void 0 : _a.currentRoom) === null || _b === void 0 ? void 0 : _b.currentPlayers.forEach((player) => {
            var _a, _b;
            const div = document.createElement("div");
            div.setAttribute("player_id", player.id.toString());
            div.draggable = true;
            div.classList.add("row");
            const avatar = document.createElement("img");
            avatar.src = main_1.default.resourceManager.resources["IMAGE_AVATAR_" + player.avatar].src;
            div.appendChild(avatar);
            const username = document.createElement("div");
            username.classList.add("username");
            if (((_b = (_a = main_1.default.currentUser) === null || _a === void 0 ? void 0 : _a.currentRoom) === null || _b === void 0 ? void 0 : _b.pickMode) == player.id)
                username.classList.add("picker");
            username.textContent = player.username;
            div.appendChild(username);
            const ping = document.createElement("div");
            ping.classList.add("ping");
            ping.textContent = player.ping.toString();
            div.appendChild(ping);
            div.addEventListener("dragstart", this.startDrag.bind(this));
            if (player.team.id == Team_1.default.RED.id)
                pick_list_red.appendChild(div);
            else if (player.team.id == Team_1.default.BLUE.id)
                pick_list_blue.appendChild(div);
            else
                pick_list_spectators.appendChild(div);
        });
    }
    playerJoin(player, playerLength) {
        const playersCount = document.getElementById("playersCount");
        if (playersCount != null)
            playersCount.textContent = playerLength.toString();
        const list_users = document.getElementById("list_users");
        const li = document.createElement("li");
        li.dataset.userId = player.id.toString();
        li.setAttribute("username", player.username);
        li.innerHTML = `${player.username} <span>${player.ping}</span>`;
        li.addEventListener("click", this.showUserMenu.bind(this));
        if (player.team == Team_1.default.RED)
            li.classList.add("red");
        else if (player.team == Team_1.default.BLUE)
            li.classList.add("blue");
        if (list_users != null)
            list_users.appendChild(li);
        this.refreshPickList();
    }
    playerLeave(playerId, playerLength) {
        const playersCount = document.getElementById("playersCount");
        if (playersCount != null)
            playersCount.textContent = playerLength.toString();
        const list_users = document.getElementById("list_users");
        if (list_users != null) {
            list_users.querySelectorAll("li").forEach(element => {
                if (element.dataset.userId == playerId.toString())
                    list_users.removeChild(element);
            });
        }
        this.refreshPickList();
    }
    newChat(data) {
        const chatContainer = document.getElementById("chatContent");
        let scrollToBottom = false;
        if (chatContainer != null && Math.abs(chatContainer.scrollHeight - chatContainer.scrollTop - chatContainer.clientHeight) < 1)
            scrollToBottom = true;
        switch (data.type) {
            case "announcement":
                {
                    const element = document.createElement("div");
                    element.classList.add("announcement");
                    element.textContent = data.officialTrad ? main_1.default.languageManager.getValueForKey(data.message, data.params ? data.params : []) : data.message;
                    if (data.color != null)
                        element.style.color = data.color;
                    if (data.bold)
                        element.style.fontWeight = "bold";
                    chatContainer === null || chatContainer === void 0 ? void 0 : chatContainer.appendChild(element);
                    switch (data.sound) {
                        case 1:
                            main_1.default.settingsManager.audio.general && main_1.default.settingsManager.audio.chat ? main_1.default.resourceManager.resources["AUDIO_HIGHLIGHT"].play() : null;
                            break;
                        default:
                            main_1.default.settingsManager.audio.general && main_1.default.settingsManager.audio.chat ? main_1.default.resourceManager.resources["AUDIO_CHAT"].play() : null;
                            break;
                    }
                    break;
                }
            case "pm_to":
            case "pm_from":
                {
                    const element = document.createElement("div");
                    element.textContent = data.message;
                    const span = document.createElement("span");
                    span.setAttribute("username", data.username);
                    span.classList.add(data.type);
                    if (data.type == "pm_to")
                        span.textContent = `[< ${main_1.default.languageManager.getValueForKey("GAME_CHAT_PM_TO", [data.username])}] `;
                    else
                        span.textContent = `[> ${main_1.default.languageManager.getValueForKey("GAME_CHAT_PM_FROM", [data.username])}] `;
                    span.addEventListener("click", this.showUserMenu.bind(this));
                    element.prepend(span);
                    chatContainer === null || chatContainer === void 0 ? void 0 : chatContainer.appendChild(element);
                    main_1.default.settingsManager.audio.general && main_1.default.settingsManager.audio.chat ? main_1.default.resourceManager.resources["AUDIO_HIGHLIGHT"].play() : null;
                    break;
                }
            default: {
                const element = document.createElement("div");
                element.textContent = data.message;
                const span = document.createElement("span");
                if (data.team != null) {
                    switch (data.team) {
                        case Team_1.default.RED.id:
                            span.style.color = Team_1.default.RED.color;
                            break;
                        case Team_1.default.BLUE.id:
                            span.style.color = Team_1.default.BLUE.color;
                            break;
                        case Team_1.default.SPECTATORS.id:
                            span.style.color = Team_1.default.SPECTATORS.color;
                            break;
                    }
                    span.textContent = `[${main_1.default.languageManager.getValueForKey("GAME_GENERAL_TEAM")}] ${data.username}: `;
                }
                else {
                    span.classList.add(data.rank);
                    span.textContent = data.username + ": ";
                }
                span.setAttribute("username", data.username);
                span.addEventListener("click", this.showUserMenu.bind(this));
                element.prepend(span);
                chatContainer === null || chatContainer === void 0 ? void 0 : chatContainer.appendChild(element);
                main_1.default.settingsManager.audio.general && main_1.default.settingsManager.audio.chat ? main_1.default.resourceManager.resources["AUDIO_CHAT"].play() : null;
                break;
            }
        }
        if (chatContainer != null) {
            if (scrollToBottom)
                chatContainer.scrollTop = chatContainer.scrollHeight;
            if (chatContainer.childElementCount > 20)
                chatContainer.removeChild(chatContainer.getElementsByTagName('div')[0]);
        }
    }
    whisper(username) {
        const chatCategory = document.getElementById("msgType"), chatMsg = document.getElementById("chatMsg");
        if (chatCategory == null || chatMsg == null)
            return;
        let optionVal = null;
        Array.from(chatCategory.getElementsByTagName("option")).forEach((element) => {
            if (element.value == username)
                optionVal = element;
        });
        if (optionVal == null) {
            const option = document.createElement("option");
            option.value = username;
            option.innerHTML = username;
            chatCategory.append(option);
        }
        chatCategory.value = username;
        chatMsg.focus();
    }
    userMenuItem(e) {
        switch (e.srcElement.getAttribute("type")) {
            case "whisper": {
                this.whisper(this.state.focusUser);
                break;
            }
            case "profile": {
                main_1.default.webSocketsManager.sendMsg("requestProfile", this.state.focusUser);
                break;
            }
            case "friend": {
                main_1.default.webSocketsManager.sendMsg("addFriend", this.state.focusUser);
                break;
            }
            case "report": {
                main_1.default.webSocketsManager.sendMsg("report", this.state.focusUser);
                break;
            }
            case "mute": {
                this.switchAdmin("new_sanction", { type: "mute", username: this.state.focusUser });
                break;
            }
            case "ban": {
                this.switchAdmin("new_sanction", { type: "ban", username: this.state.focusUser });
                break;
            }
        }
    }
    hideUserMenu() {
        document.removeEventListener('click', this.state.userMenuFunction);
        const user_menu = document.getElementById("user_menu");
        if (user_menu == null)
            return;
        user_menu.style.display = "none";
    }
    showUserMenu(e) {
        var _a;
        if (e.srcElement.getAttribute("username") == ((_a = main_1.default.currentUser) === null || _a === void 0 ? void 0 : _a.username))
            return;
        this.state.focusUser = e.srcElement.getAttribute("username");
        const user_menu = document.getElementById("user_menu");
        if (user_menu == null)
            return;
        Array.from(user_menu.getElementsByTagName("li")).forEach((element) => {
            var _a;
            if (element.getAttribute("type") == "friend" && ((_a = main_1.default.currentUser) === null || _a === void 0 ? void 0 : _a.getFriendbyUsername(this.state.focusUser)) != null)
                element.style.display = "none";
            else
                element.style.display = "block";
            if (["mute", "ban"].includes(element.getAttribute("type"))) {
                if (["user", "vip"].includes(main_1.default.currentUser.rank))
                    element.style.display = "none";
                else
                    element.style.display = "block";
            }
        });
        user_menu.style.display = "block";
        user_menu.style.left = (e.pageX - 75) + "px";
        user_menu.style.top = (e.pageY - user_menu.clientHeight - 20) + "px";
        this.state.userMenuFunction = this.hideUserMenu.bind(this);
        setTimeout(() => document.addEventListener('click', this.state.userMenuFunction, false), 10);
    }
    getRegionFlag(region) {
        switch (region.toLowerCase()) {
            case "eu":
                return "EU";
            default:
                return "UNDEFINED";
        }
    }
    render() {
        var _a;
        if (this.app == null)
            return;
        this.app.innerHTML =
            `<div class="gameScreen">
                <canvas id="game" tabindex="1"></canvas>

                <div class="header">
                    <div class="roomScore">
                        <div class="circle red"></div> <span id="scoreRed"></span> <span class="space">-</span> <span id="scoreBlue"></span> <div class="circle blue"></div>
                    </div>

                    <div class="time"><img src="assets/images/icons/clock.png"> <span id="time"></span> <span id="overtime">${main_1.default.languageManager.getValueForKey("GAME_GENERAL_OVERTIME")}</span></div>
                    <div class="players"><img src="assets/images/icons/players.png"> <span id="playersCount"></span></div>
                    <div class="roomName"><img src="assets/images/flags/region/${this.getRegionFlag(this.state.currentUser.currentServer)}.svg"/><span id="roomName"></span></div>
                </div>

                <div class="stats">
                    <div class="row"><span id="fps">0</span> fps</div>
                </div>

                <div class="relative_container">
                    <div id="notif"></div>

                    <div class="modal" id="pick_list">
                        <div class="pick_list_flex">
                            <div class="container red">
                                <div class="title">
                                    <div class="title_content">${main_1.default.languageManager.getValueForKey("GAME_TEAM_RED")}</div>
                                </div>

                                <div class="content pick_list_team" id="pick_list_red"></div>
                            </div>

                            <div class="container spectators">
                                <div class="title">
                                    <div class="title_content">${main_1.default.languageManager.getValueForKey("GAME_TEAM_SPECTATORS")}</div>
                                </div>

                                <div class="content pick_list_team" id="pick_list_spectators"></div>
                            </div>

                            <div class="container blue">
                                <div class="title">
                                    <div class="title_content">${main_1.default.languageManager.getValueForKey("GAME_TEAM_BLUE")}</div>
                                </div>

                                <div class="content pick_list_team" id="pick_list_blue"></div>
                            </div>
                        </div>
                    </div>

                    <div class="modal" id="admin">
                        <div class="container">
                            <div class="title">
                                <div class="title_content"><img src="assets/images/icons/settings.svg"> ${main_1.default.languageManager.getValueForKey("GAME_ADMIN")}</div>
                            </div>

                            <ul id="admin_menu">
                                <li type="team">${main_1.default.languageManager.getValueForKey("GAME_ADMIN_TEAM")}</li>
                                <li type="reports">${main_1.default.languageManager.getValueForKey("GAME_ADMIN_REPORTS")}</li>
                                <li type="sanctions">${main_1.default.languageManager.getValueForKey("GAME_ADMIN_SANCTIONS")}</li>
                                <li type="new_sanction">${main_1.default.languageManager.getValueForKey("GAME_ADMIN_NEW_SANCTION")}</li>
                                <li type="rank">${main_1.default.languageManager.getValueForKey("GAME_ADMIN_RANK")}</li>
                            </ul>

                            <div class="content">
                                <div class="category_title"><span id="admin_title"></span></div>

                                <div id="admin_content"></div>
                            </div>

                            <div class="bottom"><button class="close">${main_1.default.languageManager.getValueForKey("GAME_GENERAL_CLOSE")}</button></div>
                        </div>
                    </div>

                    <div class="modal" id="leaderboard">
                        <div class="container">
                            <div class="title">
                                <div class="title_content"><img src="assets/images/icons/settings.svg"> ${main_1.default.languageManager.getValueForKey("GAME_LEADERBOARD")}</div>
                            </div>

                            <div class="content">
                                <div class="filter">
                                    ${main_1.default.languageManager.getValueForKey("GAME_LEADERBOARD_FILTER")}

                                    <select id="leaderboardFilter"></select>
                                </div>

                                <div id="leaderboardContent"></div>
                            </div>

                            <div class="bottom"><button class="close">${main_1.default.languageManager.getValueForKey("GAME_GENERAL_CLOSE")}</button></div>
                        </div>
                    </div>

                    <div class="modal" id="profile">
                        <div class="container">
                            <div class="title">
                                <div class="avatar"><img profile_data="avatar"></div>
                                <div class="title_content">
                                    <span class="state" profile_data="online"></span>
                                    <span profile_data="username"></span>
                                </div>
                            </div>

                            <div class="content">
                                <div class="category">
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_REGISTERED")}: <span profile_data="registered"></span></div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_LEVEL_XP")}: <span profile_data="level_xp"></span></div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_ELO")}: <span profile_data="elo"></span></div>
                                </div>

                                <div class="category">
                                    <div class="category_title">${main_1.default.languageManager.getValueForKey("GAME_STATS_GAMES")}</div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_GAMES_PLAYED")}: <span profile_data="games_played"></span></div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_GAMES_WON")}: <span profile_data="games_won"></span></div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_GAMES_LOST")}: <span profile_data="games_lost"></span></div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_WIN_RATE")}: <span profile_data="win_rate"></span></div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_BEST_STREAK")}: <span profile_data="best_streak"></span></div>
                                </div>

                                <div class="category">
                                    <div class="category_title">${main_1.default.languageManager.getValueForKey("GAME_STATS_GENERAL")}</div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_SHOTS")}: <span profile_data="shots"></span></div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_SHOTS_PER_MATCH")}: <span profile_data="shots_per_match"></span></div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_GOALS")}: <span profile_data="goals"></span></div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_GOALS_PER_MATCH")}: <span profile_data="goals_per_match"></span></div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_HAT_TRICKS")}: <span profile_data="hat_tricks"></span></div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_ASSISTS")}: <span profile_data="assists"></span></div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_ASSISTS_PER_MATCH")}: <span profile_data="assists_per_match"></span></div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_SAVES")}: <span profile_data="saves"></span></div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_SAVES_PER_MATCH")}: <span profile_data="saves_per_match"></span></div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_PASS_ACCURACY")}: <span profile_data="pass_accuracy"></span></div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_PASS_PER_MATCH")}: <span profile_data="pass_per_match"></span></div>
                                </div>

                                <div class="category">
                                    <div class="category_title">${main_1.default.languageManager.getValueForKey("GAME_STATS_GOALKEEPER")}</div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_PLAYED_GK")}: <span profile_data="played_gk"></span></div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_CS")}: <span profile_data="cs"></span></div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_STATS_CS_PERCENTAGE")}: <span profile_data="cs_percentage"></span></div>
                                </div>

                                <div class="category">
                                    <div class="category_title">${main_1.default.languageManager.getValueForKey("GAME_STATS_BADGES")}</div>
                                    <div>${main_1.default.languageManager.getValueForKey("GAME_GENERAL_NOT_AVAILABLE")}</div>
                                </div>
                            </div>

                            <div class="bottom"><button class="close">${main_1.default.languageManager.getValueForKey("GAME_GENERAL_CLOSE")}</button></div>
                        </div>
                    </div>

                    <div class="modal" id="settings">
                        <div class="container">
                            <div class="title">
                                <div class="title_content"><img src="assets/images/icons/settings.svg"> ${main_1.default.languageManager.getValueForKey("GAME_SETTINGS")}</div>
                            </div>

                            <div class="content">
                                <ul class="menu">
                                    <li category="graphics" class="selected">${main_1.default.languageManager.getValueForKey("GAME_MENU_GRAPHICS")}</li>
                                    <li category="audio">${main_1.default.languageManager.getValueForKey("GAME_MENU_AUDIO")}</li>
                                    <li category="inputs">${main_1.default.languageManager.getValueForKey("GAME_MENU_INPUTS")}</li>
                                </ul>

                                <div class="category" category_name="graphics">
                                    <div class="row">
                                        <span>${main_1.default.languageManager.getValueForKey("GAME_MENU_GRAPHICS_ZOOM")}</span>
                                        <select type="settings" settings_category="graphics" settings_val="zoom">
                                            <option value="1">${main_1.default.languageManager.getValueForKey("GAME_MENU_GRAPHICS_ZOOM")} 1x</option>
                                            <option value="1.25">${main_1.default.languageManager.getValueForKey("GAME_MENU_GRAPHICS_ZOOM")} 1.25x</option>
                                            <option value="1.5">${main_1.default.languageManager.getValueForKey("GAME_MENU_GRAPHICS_ZOOM")} 1.5x</option>
                                            <option value="1.75">${main_1.default.languageManager.getValueForKey("GAME_MENU_GRAPHICS_ZOOM")} 1.75x</option>
                                            <option value="2">${main_1.default.languageManager.getValueForKey("GAME_MENU_GRAPHICS_ZOOM")} 2x</option>
                                            <option value="2.25">${main_1.default.languageManager.getValueForKey("GAME_MENU_GRAPHICS_ZOOM")} 2.25x</option>
                                            <option value="2.5">${main_1.default.languageManager.getValueForKey("GAME_MENU_GRAPHICS_ZOOM")} 2.5x</option>
                                        </select>
                                    </div>

                                    <div class="row">
                                        <span>${main_1.default.languageManager.getValueForKey("GAME_MENU_GRAPHICS_FPS")}</span>
                                        <select type="settings" settings_category="graphics" settings_val="fps">
                                            <option value="0">${main_1.default.languageManager.getValueForKey("GAME_MENU_GRAPHICS_FPS_NO_LIMIT")}</option>
                                            <option value="60">60</option>
                                            <option value="30">30</option>
                                            <option value="20">20</option>
                                            <option value="10">10</option>
                                        </select>
                                    </div>
                                </div>

                                <div class="category" category_name="audio">
                                    <div class="row">
                                        <span>${main_1.default.languageManager.getValueForKey("GAME_MENU_AUDIO_GENERAL")}</span>
                                        
                                        <div class="toggle-rect">
                                            <input type="checkbox" id="settings_audio_general" settings_category="audio" settings_val="general">
                                            <label for="settings_audio_general"></label>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <span>${main_1.default.languageManager.getValueForKey("GAME_MENU_AUDIO_CHAT")}</span>
                                        
                                        <div class="toggle-rect">
                                            <input type="checkbox" id="settings_audio_chat" settings_category="audio" settings_val="chat">
                                            <label for="settings_audio_chat"></label>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <span>${main_1.default.languageManager.getValueForKey("GAME_MENU_AUDIO_GAME")}</span>
                                        
                                        <div class="toggle-rect">
                                            <input type="checkbox" id="settings_audio_game" settings_category="audio" settings_val="game">
                                            <label for="settings_audio_game"></label>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <span>${main_1.default.languageManager.getValueForKey("GAME_MENU_AUDIO_NOTIFICATION")}</span>
                                        
                                        <div class="toggle-rect">
                                            <input type="checkbox" id="settings_audio_notif" settings_category="audio" settings_val="notif">
                                            <label for="settings_audio_notif"></label>
                                        </div>
                                    </div>
                                </div>

                                <div class="category" category_name="inputs">
                                    <div id="recordKey"><div>${main_1.default.languageManager.getValueForKey("GAME_MENU_INPUTS_PRESS")}</div></div>

                                    <div class="row inputs">
                                        <span>${main_1.default.languageManager.getValueForKey("GAME_MENU_INPUTS_UP")}</span>
                                        
                                        <div class="inputs_value" settings_category="inputs" settings_val="up"></div>
                                    </div>

                                    <div class="row inputs">
                                        <span>${main_1.default.languageManager.getValueForKey("GAME_MENU_INPUTS_DOWN")}</span>
                                        
                                        <div class="inputs_value" settings_category="inputs" settings_val="down"></div>
                                    </div>

                                    <div class="row inputs">
                                        <span>${main_1.default.languageManager.getValueForKey("GAME_MENU_INPUTS_LEFT")}</span>
                                        
                                        <div class="inputs_value" settings_category="inputs" settings_val="left"></div>
                                    </div>

                                    <div class="row inputs">
                                        <span>${main_1.default.languageManager.getValueForKey("GAME_MENU_INPUTS_RIGHT")}</span>
                                        
                                        <div class="inputs_value" settings_category="inputs" settings_val="right"></div>
                                    </div>

                                    <div class="row inputs">
                                        <span>${main_1.default.languageManager.getValueForKey("GAME_MENU_INPUTS_KICK")}</span>
                                        
                                        <div class="inputs_value" settings_category="inputs" settings_val="kick"></div>
                                    </div>

                                    <div class="row inputs">
                                        <span>${main_1.default.languageManager.getValueForKey("GAME_MENU_INPUTS_TOGGLE_CHAT")}</span>
                                        
                                        <div class="inputs_value" settings_category="inputs" settings_val="toggle_chat"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="bottom"><button class="close">${main_1.default.languageManager.getValueForKey("GAME_GENERAL_CLOSE")}</button></div>
                        </div>
                    </div>

                    <div class="modal" id="friends">
                        <div class="container">
                            <div class="title">
                                <div class="title_content"><img src="assets/images/icons/heart.svg"> ${main_1.default.languageManager.getValueForKey("GAME_FRIENDS")}</div>
                            </div>

                            <div class="content" id="friendsList"></div>

                            <div class="bottom"><button class="close">${main_1.default.languageManager.getValueForKey("GAME_GENERAL_CLOSE")}</button></div>
                        </div>
                    </div>

                    <div class="modal" id="shop">
                        <div class="container">
                            <div class="title">
                                <div class="title_content"><img src="assets/images/icons/basket.svg"> ${main_1.default.languageManager.getValueForKey("GAME_SHOP")}</div>
                            </div>

                            <div class="flex">
                                <div class="categorys">
                                    <div class="coin"><img src="assets/images/icons/coin.png"> <span id="shopCoinVal"></span></div>

                                    <div id="shopCategorys"></div>
                                </div>

                                <div class="items" id="shopItems"></div>
                            </div>

                            <div class="bottom"><button class="close">${main_1.default.languageManager.getValueForKey("GAME_GENERAL_CLOSE")}</button></div>
                        </div>
                    </div>
                </div>

                <ul id="user_menu">
                    <li type="mute">${main_1.default.languageManager.getValueForKey("GAME_USER_MENU_MUTE")}</li>
                    <li type="ban">${main_1.default.languageManager.getValueForKey("GAME_USER_MENU_BAN")}</li>
                    <li type="profile">${main_1.default.languageManager.getValueForKey("GAME_USER_MENU_PROFILE")}</li>
                    <li type="friend">${main_1.default.languageManager.getValueForKey("GAME_USER_MENU_FRIEND")}</li>
                    <li type="report">${main_1.default.languageManager.getValueForKey("GAME_USER_MENU_REPORT")}</li>
                    <li type="whisper">${main_1.default.languageManager.getValueForKey("GAME_USER_MENU_WHISPER")}</li>
                </ul>

                <div class="bottom_container">
                    <div class="user">
                        <div class="left">
                            <div class="avatar" id="request_profile"><img src="${main_1.default.resourceManager.resources["IMAGE_AVATAR_" + ((_a = main_1.default.currentUser) === null || _a === void 0 ? void 0 : _a.avatar)].src}" id="avatar"></div>

                            <div class="general_menu">
                                <div type="friends"><img src="assets/images/icons/heart.svg"></div>
                                <div type="shop"><img src="assets/images/icons/basket.svg"></div>
                                <div type="settings"><img src="assets/images/icons/settings.svg"></div>
                            </div>
                        </div>

                        <div class="right">
                            <div class="general_menu">
                                <div type="menu"><img src="assets/images/icons/menu.svg"></div>
                                <div type="leaderboard"><img src="assets/images/icons/leaderboard.svg"></div>
                                <div type="team"><img src="assets/images/icons/team.svg"></div>
                                <div type="admin"><img src="assets/images/icons/star.svg"></div>
                            </div>
                        </div>
                    </div>

                    <div class="chat">
                        <div id="chatContent"></div>

                        <form method="post" id="chatForm">
                            <select id="msgType">
                                <option value="#room">${main_1.default.languageManager.getValueForKey("GAME_CHAT_OPTION_ROOM")}</option>
                                <option value="#team">${main_1.default.languageManager.getValueForKey("GAME_CHAT_OPTION_TEAM")}</option>
                            </select>

                            <input type="text" id="chatMsg" maxlength="150" placeholder="${main_1.default.languageManager.getValueForKey("GAME_CHAT_MESSAGE")}"/>
                        </form>
                    </div>

                    <ul id="list_users"></ul>

                    <div id="history"></div>
                </div>
            </div>`;
    }
}
exports["default"] = GameScene;


/***/ }),

/***/ "./client/Scene/List/LoginScene.ts":
/*!*****************************************!*\
  !*** ./client/Scene/List/LoginScene.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Config_1 = __importDefault(__webpack_require__(/*! ../../Config/Config */ "./client/Config/Config.ts"));
const main_1 = __importDefault(__webpack_require__(/*! ../../main */ "./client/main.ts"));
const Scene_1 = __importDefault(__webpack_require__(/*! ../Scene */ "./client/Scene/Scene.ts"));
class LoginScene extends Scene_1.default {
    constructor(state) {
        super(state.name);
        this.state = {
            error: null,
            args: null,
            fakeLoginId: 0,
            content: "login",
            username: "",
            password: "",
            password_confirm: "",
            server: null
        };
    }
    setState(params) {
        this.onDestroy();
        for (let i in params) {
            this.state[i] = params[i];
        }
        this.render();
        this.onInitialized();
    }
    onWillInit() {
        super.onWillInit();
    }
    onInitialized() {
        super.onInitialized();
        const username = document.getElementById("username");
        username === null || username === void 0 ? void 0 : username.addEventListener("input", this.setUsername.bind(this));
        const password = document.getElementById("password");
        password === null || password === void 0 ? void 0 : password.addEventListener("input", this.setPassword.bind(this));
        const password_confirm = document.getElementById("password_confirm");
        password_confirm === null || password_confirm === void 0 ? void 0 : password_confirm.addEventListener("input", this.setPasswordConfirm.bind(this));
        const server = document.getElementById("server");
        server === null || server === void 0 ? void 0 : server.addEventListener("change", this.setServer.bind(this));
        const registerButton = document.getElementById("register");
        registerButton === null || registerButton === void 0 ? void 0 : registerButton.addEventListener("click", () => this.setContent("register"));
        const loginButton = document.getElementById("login");
        loginButton === null || loginButton === void 0 ? void 0 : loginButton.addEventListener("click", () => this.setContent("login"));
        const flagButton = document.getElementById("flag");
        flagButton === null || flagButton === void 0 ? void 0 : flagButton.addEventListener("click", () => this.setContent("language"));
        const flags = document.getElementsByClassName("flag_row");
        Array.from(flags).forEach(flagRow => {
            flagRow === null || flagRow === void 0 ? void 0 : flagRow.addEventListener("click", this.setActiveLanguage.bind(this));
        });
        const loginForm = document.getElementById("loginForm");
        loginForm === null || loginForm === void 0 ? void 0 : loginForm.addEventListener("submit", this.login.bind(this));
        const registerForm = document.getElementById("registerForm");
        registerForm === null || registerForm === void 0 ? void 0 : registerForm.addEventListener("submit", this.register.bind(this));
        /*
        const serverse = Application.regionServerManager.getServerById(this.state.server);
        if(serverse == null)
            return this.setState({error: "ACCOUNT_ERROR_OCCURED"});
        
        if(this.state.fakeLoginId == 0)
            Application.webSocketsManager.sendMsg("tryLogin", {username: this.state.username, password: this.state.password, server: this.state.server, serverClientId: serverse.clientId})
    */
    }
    setUsername(e) {
        this.state.username = e.target.value;
    }
    setPassword(e) {
        this.state.password = e.target.value;
    }
    setPasswordConfirm(e) {
        this.state.password_confirm = e.target.value;
    }
    setServer(e) {
        this.state.server = e.target.value;
    }
    onDestroy() {
        super.onDestroy();
        const username = document.getElementById("username");
        username === null || username === void 0 ? void 0 : username.removeEventListener("change", this.setUsername.bind(this), false);
        const password = document.getElementById("password");
        password === null || password === void 0 ? void 0 : password.removeEventListener("change", this.setPassword.bind(this), false);
        const password_confirm = document.getElementById("password_confirm");
        password_confirm === null || password_confirm === void 0 ? void 0 : password_confirm.removeEventListener("change", this.setPasswordConfirm.bind(this), false);
        const server = document.getElementById("server");
        server === null || server === void 0 ? void 0 : server.removeEventListener("change", this.setServer.bind(this), false);
        const registerButton = document.getElementById("register");
        registerButton === null || registerButton === void 0 ? void 0 : registerButton.removeEventListener("click", () => this.setContent("register"), false);
        const loginButton = document.getElementById("register");
        loginButton === null || loginButton === void 0 ? void 0 : loginButton.removeEventListener("click", () => this.setContent("login"), false);
        const flagButton = document.getElementById("register");
        flagButton === null || flagButton === void 0 ? void 0 : flagButton.removeEventListener("click", () => this.setContent("language"), false);
        const flags = document.getElementsByClassName("flag_row");
        Array.from(flags).forEach(flagRow => {
            flagRow === null || flagRow === void 0 ? void 0 : flagRow.removeEventListener("click", this.setActiveLanguage.bind(this), false);
        });
        const loginForm = document.getElementById("loginForm");
        loginForm === null || loginForm === void 0 ? void 0 : loginForm.removeEventListener("submit", this.login.bind(this), false);
        const registerForm = document.getElementById("registerForm");
        registerForm === null || registerForm === void 0 ? void 0 : registerForm.removeEventListener("submit", this.register.bind(this), false);
    }
    setActiveLanguage(e) {
        if (e.target == null || e.target.id == null)
            return;
        main_1.default.languageManager.setLanguage(e.target.id);
        this.setContent("login");
    }
    setContent(value) {
        if (value == "login" || value == "register") {
            this.state.username = "";
            this.state.password = "";
            this.state.password_confirm = "";
            this.state.error = "";
        }
        this.setState({ content: value });
    }
    login(e) {
        e.preventDefault();
        const server = main_1.default.regionServerManager.getServerById(this.state.server);
        if (server == null)
            return this.setState({ error: "ACCOUNT_ERROR_OCCURED" });
        main_1.default.webSocketsManager.sendMsg("tryLogin", { username: this.state.username, password: this.state.password, server: this.state.server, serverClientId: server.clientId });
    }
    register(e) {
        e.preventDefault();
        const server = main_1.default.regionServerManager.getServerById(this.state.server);
        if (server == null)
            return this.setState({ error: "ACCOUNT_ERROR_OCCURED" });
        main_1.default.webSocketsManager.sendMsg("tryRegister", { username: this.state.username, password: this.state.password, password_confirm: this.state.password_confirm, server: this.state.server, serverClientId: server.clientId });
    }
    renderAvaiableLanguage() {
        let content = ``;
        main_1.default.languageManager.getAvailableLanguages().forEach((language) => {
            content += `<img src="assets/images/flags/${language}.svg" class="flag_row" id="${language}">`;
        });
        return content;
    }
    renderServers() {
        let content = ``;
        main_1.default.regionServerManager.getAllServers().forEach((server) => {
            if (this.state.server == null)
                this.state.server = server.id;
            content += `<option value="${server.id}" ${this.state.server == server.id ? "selected" : null}>${main_1.default.languageManager.getValueForKey("ACCOUNT_SERVER", [server.id, server.ping])}</option>`;
        });
        return content;
    }
    renderError() {
        let error = ``;
        if (this.state.error) {
            /*
            this.state.fakeLoginId++;

            const serverse = Application.regionServerManager.getServerById(this.state.server);
            if(serverse != null)
                Application.webSocketsManager.sendMsg("tryLogin", {username: `${this.state.username}${this.state.fakeLoginId}`, password: this.state.password, server: this.state.server, serverClientId: serverse.clientId})
            */
            error = `<div class="error">${main_1.default.languageManager.getValueForKey(this.state.error, this.state.args)}</div>`;
        }
        return error;
    }
    renderContent() {
        switch (this.state.content) {
            case "login":
                return `<div class="login">
                    <img src="assets/images/logo.png" class="logo">
                    <div class="title">${main_1.default.languageManager.getValueForKey("ACCOUNT_LOGIN")}</div>

                    <div class="container">
                        ${this.renderError()}

                        <form method="post" id="loginForm">
                            <input type="text" id="username" placeholder="${main_1.default.languageManager.getValueForKey("ACCOUNT_USERNAME")}" value="${this.state.username}" maxlength="15"></input>
                            <input type="password" id="password" placeholder="${main_1.default.languageManager.getValueForKey("ACCOUNT_PASSWORD")}" value="${this.state.password}"></input>
                            <select id="server">
                                ${this.renderServers()}
                            </select>
                            <input type="submit" value="${main_1.default.languageManager.getValueForKey("ACCOUNT_LOGIN")}">
                        </form>

                        <div class="line">
                            <button id="register">${main_1.default.languageManager.getValueForKey("ACCOUNT_REGISTER")}</button>
                            <img src="assets/images/flags/${main_1.default.languageManager.getValueForKey("CODE")}.svg" class="flag" id="flag"/>
                        </div>
                    </div>
                </div>`;
            case "register":
                return `<div class="register">
                    <img src="assets/images/logo.png" class="logo">
                    <div class="title">${main_1.default.languageManager.getValueForKey("ACCOUNT_REGISTER")}</div>

                    <div class="container">
                        ${this.renderError()}

                        <form method="post" id="registerForm">
                            <input type="text" id="username" placeholder="${main_1.default.languageManager.getValueForKey("ACCOUNT_USERNAME")}" value="${this.state.username}" maxlength="15"></input>
                            <input type="password" id="password" placeholder="${main_1.default.languageManager.getValueForKey("ACCOUNT_PASSWORD")}" value="${this.state.password}"></input>
                            <input type="password" id="password_confirm" placeholder="${main_1.default.languageManager.getValueForKey("ACCOUNT_CONFIRM_PASSWORD")}" value="${this.state.password_confirm}"></input>
                            <select id="server">
                                ${this.renderServers()}
                            </select>
                            <input type="submit" value="${main_1.default.languageManager.getValueForKey("ACCOUNT_REGISTER")}">
                        </form>

                        <div class="line">
                            <button id="login">${main_1.default.languageManager.getValueForKey("ACCOUNT_LOGIN")}</button>
                            <img src="assets/images/flags/${main_1.default.languageManager.getValueForKey("CODE")}.svg" class="flag" id="flag"/>
                        </div>
                    </div>
                </div>`;
            case "language":
                return `<div class="language">
                    <img src="assets/images/logo.png" class="logo">
                    <div class="title">${main_1.default.languageManager.getValueForKey("ACCOUNT_LANGUAGE")}</div>

                    <div class="container">
                        <div class="flags">
                            ${this.renderAvaiableLanguage()}
                        </div>
                    </div>
                </div>`;
            default:
                return null;
        }
    }
    render() {
        if (this.app == null)
            return;
        this.app.innerHTML =
            `<div class="account">

                ${this.renderContent()}

                <div class="footer">${main_1.default.languageManager.getValueForKey("COPYRIGHT", [Config_1.default.NAME])}</div>
            </div>`;
    }
}
exports["default"] = LoginScene;


/***/ }),

/***/ "./client/Scene/List/MessageScene.ts":
/*!*******************************************!*\
  !*** ./client/Scene/List/MessageScene.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Config_1 = __importDefault(__webpack_require__(/*! ../../Config/Config */ "./client/Config/Config.ts"));
const Scene_1 = __importDefault(__webpack_require__(/*! ../Scene */ "./client/Scene/Scene.ts"));
class MessageScene extends Scene_1.default {
    constructor(state) {
        super(state.name);
        this.state = {
            message: state.params.message
        };
    }
    setState(params) {
        super.setState(params);
        for (let i in params) {
            this.state[i] = params[i];
        }
        this.render();
    }
    onWillInit() {
        super.onWillInit();
        document.title = Config_1.default.NAME;
    }
    onInitialized() {
        super.onInitialized();
    }
    onDestroy() {
        super.onDestroy();
    }
    render() {
        if (this.app == null)
            return;
        this.app.innerHTML =
            `<div class="loadingScreen">
                <img src="assets/images/logo.png">
                <div class="message">${this.state["message"]}</div>
            </div>`;
    }
}
exports["default"] = MessageScene;


/***/ }),

/***/ "./client/Scene/Scene.ts":
/*!*******************************!*\
  !*** ./client/Scene/Scene.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const main_1 = __importDefault(__webpack_require__(/*! ../main */ "./client/main.ts"));
class Scene {
    constructor(name) {
        this.name = name;
        this.app = document.getElementById("app");
        main_1.default.logger.sendLog("VERBOSE", `Initiliazing scene ${this.name}.`);
    }
    setState(params) {
    }
    onWillInit() {
        if (this.app == null)
            main_1.default.logger.sendLog("ERROR", "Impossible to find #app HTML element.");
    }
    onInitialized() { }
    onDestroy() {
        if (this.app != null)
            this.app.innerHTML = "";
    }
    render() { }
}
exports["default"] = Scene;


/***/ }),

/***/ "./client/Scene/SceneList.ts":
/*!***********************************!*\
  !*** ./client/Scene/SceneList.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SceneType = void 0;
const GameScene_1 = __importDefault(__webpack_require__(/*! ./List/GameScene */ "./client/Scene/List/GameScene.ts"));
const LoginScene_1 = __importDefault(__webpack_require__(/*! ./List/LoginScene */ "./client/Scene/List/LoginScene.ts"));
const MessageScene_1 = __importDefault(__webpack_require__(/*! ./List/MessageScene */ "./client/Scene/List/MessageScene.ts"));
exports.SceneType = {
    0: MessageScene_1.default,
    1: LoginScene_1.default,
    2: GameScene_1.default
};


/***/ }),

/***/ "./client/Scene/SceneManager.ts":
/*!**************************************!*\
  !*** ./client/Scene/SceneManager.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const main_1 = __importDefault(__webpack_require__(/*! ../main */ "./client/main.ts"));
const GameScene_1 = __importDefault(__webpack_require__(/*! ./List/GameScene */ "./client/Scene/List/GameScene.ts"));
const LoginScene_1 = __importDefault(__webpack_require__(/*! ./List/LoginScene */ "./client/Scene/List/LoginScene.ts"));
const MessageScene_1 = __importDefault(__webpack_require__(/*! ./List/MessageScene */ "./client/Scene/List/MessageScene.ts"));
const SceneList_1 = __webpack_require__(/*! ./SceneList */ "./client/Scene/SceneList.ts");
class SceneManager {
    constructor() {
        this.scene = null;
    }
    initScene(scene, params = {}) {
        if (this.scene instanceof SceneList_1.SceneType[scene])
            return this.scene.setState(params);
        if (this.scene != null) {
            this.scene.onDestroy();
            this.scene = null;
        }
        switch (scene) {
            case 0 /* SceneList.MessageScene */:
                {
                    this.scene = new MessageScene_1.default({
                        name: "MessageScene",
                        params: params
                    });
                    break;
                }
            case 1 /* SceneList.LoginScene */:
                {
                    this.scene = new LoginScene_1.default({
                        name: "LoginScene",
                        params: params
                    });
                    break;
                }
            case 2 /* SceneList.GameScene */:
                {
                    this.scene = new GameScene_1.default({
                        name: "GameScene",
                        params: params
                    });
                    break;
                }
            default:
                main_1.default.logger.sendLog("ERROR", `Impossible to load scene ${scene}.`);
                break;
        }
        if (this.scene != null) {
            this.scene.onWillInit();
            this.scene.render();
            this.scene.onInitialized();
        }
    }
}
exports["default"] = SceneManager;


/***/ }),

/***/ "./client/Settings/SettingsManager.ts":
/*!********************************************!*\
  !*** ./client/Settings/SettingsManager.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
class SettingsManager {
    constructor() {
        this.graphics = {
            zoom: 1.25,
            fps: 0
        };
        this.audio = {
            general: true,
            chat: true,
            game: true,
            notif: true
        };
        this.inputs = {
            up: ["ArrowUp"],
            down: ["ArrowDown"],
            left: ["ArrowLeft"],
            right: ["ArrowRight"],
            kick: ["KeyX", "Space"],
            toggle_chat: ["Enter", "NumpadEnter", "Tab"],
        };
    }
    init() {
        const graphicsStorage = localStorage.getItem("settings_graphics");
        if (graphicsStorage != null && JSON.parse(graphicsStorage))
            this.graphics = JSON.parse(graphicsStorage);
        const audioStorage = localStorage.getItem("settings_audio");
        if (audioStorage != null && JSON.parse(audioStorage))
            this.audio = JSON.parse(audioStorage);
        const inputs = localStorage.getItem("settings_inputs");
        if (inputs != null && JSON.parse(inputs))
            this.inputs = JSON.parse(inputs);
    }
    saveSettings(type) {
        switch (type) {
            case "graphics": {
                localStorage.setItem("settings_graphics", JSON.stringify(this.graphics));
                break;
            }
            case "audio": {
                localStorage.setItem("settings_audio", JSON.stringify(this.audio));
                break;
            }
            case "inputs": {
                localStorage.setItem("settings_inputs", JSON.stringify(this.inputs));
                break;
            }
        }
    }
    removeKey(type, value) {
        if (this.inputs[type] == null || !this.inputs[type].includes(value))
            return;
        this.inputs[type] = this.inputs[type].filter(function (key) {
            return key != value;
        });
        this.saveSettings("inputs");
    }
    setSettings(type, value, val) {
        switch (type) {
            case "graphics": {
                if (this.graphics[value] == null || val instanceof Number)
                    return;
                this.graphics[value] = val;
                this.saveSettings(type);
                break;
            }
            case "audio": {
                if (this.audio[value] == null || val instanceof Boolean)
                    return;
                this.audio[value] = val;
                this.saveSettings(type);
                break;
            }
            case "inputs": {
                if (this.inputs[value] == null || val instanceof String)
                    return;
                let contains = (this.inputs.up.includes(val) ||
                    this.inputs.down.includes(val) ||
                    this.inputs.left.includes(val) ||
                    this.inputs.right.includes(val) ||
                    this.inputs.kick.includes(val) ||
                    this.inputs.toggle_chat.includes(val));
                if (contains || val.startsWith("Digit") || val == "KeyP")
                    return;
                this.inputs[value].push(val);
                this.saveSettings(type);
                break;
            }
        }
    }
}
exports["default"] = SettingsManager;


/***/ }),

/***/ "./client/User/User.ts":
/*!*****************************!*\
  !*** ./client/User/User.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
class User {
    constructor(data) {
        this.id = data.id;
        this.username = data.username;
        this.rank = data.rank;
        this.avatar = data.avatar;
        this.coins = data.coins;
        this.items = data.items;
        this.friends = data.friends;
        this.currentServer = data.currentServer;
        this.currentRoom = null;
    }
    getFriendbyUsername(username) {
        let friendReturned = null;
        this.friends.forEach((friend) => {
            if (friend.username == username)
                friendReturned = friend;
        });
        return friendReturned;
    }
}
exports["default"] = User;


/***/ }),

/***/ "./client/Utils/Utils.ts":
/*!*******************************!*\
  !*** ./client/Utils/Utils.ts ***!
  \*******************************/
/***/ (() => {


String.prototype.supplant = function (o) {
    return this.replace(/{([^{}]*)}/g, function (a, b) {
        var r = o[b];
        return typeof r === 'string' || typeof r === 'number' ? r : a;
    });
};


/***/ }),

/***/ "./client/WebSockets/RegionServer/RegionServer.ts":
/*!********************************************************!*\
  !*** ./client/WebSockets/RegionServer/RegionServer.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const pako_1 = __importDefault(__webpack_require__(/*! pako */ "./node_modules/pako/index.js"));
const Room_1 = __importDefault(__webpack_require__(/*! ../../Room/Room */ "./client/Room/Room.ts"));
const GameScene_1 = __importDefault(__webpack_require__(/*! ../../Scene/List/GameScene */ "./client/Scene/List/GameScene.ts"));
const main_1 = __importDefault(__webpack_require__(/*! ../../main */ "./client/main.ts"));
class RegionServer {
    constructor(data) {
        this.ws = null;
        this.id = data.id;
        this.ip = data.ip;
        this.port = data.port;
        this.clientId = null;
        this.ping = 0;
        this.pingDate = 0;
        this.intervalPing = null;
        this.getPong = true;
    }
    connect() {
        return new Promise((resolve, reject) => {
            const instance = this;
            this.ws = new WebSocket(`ws://${this.ip}:${this.port}`);
            this.ws.onclose = () => {
                if (instance.intervalPing != null)
                    clearInterval(instance.intervalPing);
                main_1.default.regionServerManager.destroyServer(instance.id);
                resolve(`Impossible to connect to server region [${instance.id}].`);
            };
            this.ws.onopen = () => {
                instance.intervalPing = setInterval(instance.sendPing.bind(instance), 1000);
            };
            this.ws.onmessage = (msg) => {
                if (msg == null || msg.data == null)
                    return;
                if (msg.data instanceof Blob) {
                    const reader = new FileReader();
                    reader.onload = (event) => {
                        var _a;
                        const arrayBuffer = (_a = event === null || event === void 0 ? void 0 : event.target) === null || _a === void 0 ? void 0 : _a.result;
                        // Decompress the ArrayBuffer using Pako
                        processMessage(pako_1.default.inflate(new Uint8Array(arrayBuffer), { to: 'string' }));
                    };
                    reader.readAsArrayBuffer(msg.data);
                }
                else {
                    processMessage(pako_1.default.inflate(msg.data, { to: "string" }));
                }
            };
            const processMessage = (msg) => {
                const message = JSON.parse(msg.toString());
                switch (message.key) {
                    case "pong": {
                        instance.clientId = message.value.clientId;
                        const now = Date.now();
                        instance.ping = Date.now() - instance.pingDate;
                        instance.getPong = true;
                        resolve(`Region server [${instance.id}] loaded.`);
                        break;
                    }
                    case "roomInit": {
                        if (main_1.default.currentUser == null)
                            return;
                        main_1.default.currentUser.currentRoom = new Room_1.default(message.value);
                        if (main_1.default.sceneManager.scene instanceof GameScene_1.default)
                            main_1.default.sceneManager.scene.initRoom(main_1.default.currentUser.currentRoom);
                        break;
                    }
                    case "playerJoin": {
                        if (main_1.default.currentUser == null || main_1.default.currentUser.currentRoom == null)
                            return;
                        main_1.default.currentUser.currentRoom.playerJoin(message.value);
                        if (main_1.default.sceneManager.scene instanceof GameScene_1.default)
                            main_1.default.sceneManager.scene.playerJoin(message.value, main_1.default.currentUser.currentRoom.currentPlayers.length);
                        if (main_1.default.settingsManager.audio.general && main_1.default.settingsManager.audio.game) {
                            const audio = main_1.default.resourceManager.resources["AUDIO_JOIN"].cloneNode();
                            audio.play();
                        }
                        break;
                    }
                    case "playerLeave": {
                        if (main_1.default.currentUser == null || main_1.default.currentUser.currentRoom == null)
                            return;
                        main_1.default.currentUser.currentRoom.playerLeave(message.value);
                        if (main_1.default.sceneManager.scene instanceof GameScene_1.default)
                            main_1.default.sceneManager.scene.playerLeave(message.value, main_1.default.currentUser.currentRoom.currentPlayers.length);
                        if (main_1.default.settingsManager.audio.general && main_1.default.settingsManager.audio.game) {
                            const audio = main_1.default.resourceManager.resources["AUDIO_LEAVE"].cloneNode();
                            audio.play();
                        }
                        break;
                    }
                    case "mapData": {
                        if (main_1.default.currentUser == null || main_1.default.currentUser.currentRoom == null)
                            return;
                        main_1.default.currentUser.currentRoom.stadium = message.value;
                        break;
                    }
                    case "worldState": {
                        if (main_1.default.currentUser == null || main_1.default.currentUser.currentRoom == null)
                            return;
                        main_1.default.currentUser.currentRoom.update(message.value);
                        if (main_1.default.sceneManager.scene instanceof GameScene_1.default)
                            main_1.default.sceneManager.scene.update(main_1.default.currentUser.currentRoom);
                        break;
                    }
                    case "addHistory": {
                        if (main_1.default.currentUser == null || main_1.default.currentUser.currentRoom == null)
                            return;
                        main_1.default.currentUser.currentRoom.history.push(message.value);
                        if (main_1.default.sceneManager.scene instanceof GameScene_1.default)
                            main_1.default.sceneManager.scene.addHistory(message.value);
                        break;
                    }
                    case "gamePause": {
                        if (main_1.default.currentUser == null || main_1.default.currentUser.currentRoom == null)
                            return;
                        if (message.value == false) {
                            if (main_1.default.sceneManager.scene instanceof GameScene_1.default)
                                main_1.default.sceneManager.scene.state.unpauseInterval = (3000 - this.ping);
                        }
                        break;
                    }
                    case "sound": {
                        if (main_1.default.currentUser == null || main_1.default.currentUser.currentRoom == null)
                            return;
                        if (!main_1.default.settingsManager.audio.general || !main_1.default.settingsManager.audio.game)
                            return;
                        switch (message.value) {
                            case "kick": {
                                const audio = main_1.default.resourceManager.resources["AUDIO_KICK"].cloneNode();
                                audio.play();
                                break;
                            }
                            case "goal": {
                                main_1.default.resourceManager.resources["AUDIO_GOAL"].play();
                                main_1.default.resourceManager.resources["AUDIO_CROWD"].volume = 1;
                                main_1.default.resourceManager.resources["AUDIO_CROWD"].play();
                                for (let i = 20; i < 40; i++) {
                                    setTimeout(() => {
                                        main_1.default.resourceManager.resources["AUDIO_CROWD"].volume = ((40 - i) / 40) * 2;
                                    }, i * 100);
                                }
                                setTimeout(() => {
                                    main_1.default.resourceManager.resources["AUDIO_CROWD"].pause();
                                    main_1.default.resourceManager.resources["AUDIO_CROWD"].currentTime = 0;
                                }, 4000);
                                break;
                            }
                        }
                        break;
                    }
                    case "reorderPlayer": {
                        if (main_1.default.currentUser == null || main_1.default.currentUser.currentRoom == null)
                            return;
                        main_1.default.currentUser.currentRoom.reorderPlayer(message.value);
                        if (main_1.default.sceneManager.scene instanceof GameScene_1.default)
                            main_1.default.sceneManager.scene.refreshPickList();
                        break;
                    }
                    case "pickMode": {
                        if (main_1.default.currentUser == null || main_1.default.currentUser.currentRoom == null)
                            return;
                        main_1.default.currentUser.currentRoom.pickMode = message.value;
                        if (main_1.default.currentUser.currentRoom.pickMode == main_1.default.currentUser.id && main_1.default.settingsManager.audio.general && main_1.default.settingsManager.audio.notif) {
                            const audio = main_1.default.resourceManager.resources["AUDIO_NOTIF"].cloneNode();
                            audio.play();
                            break;
                        }
                        if (main_1.default.sceneManager.scene instanceof GameScene_1.default) {
                            main_1.default.sceneManager.scene.refreshPickList();
                            if (message.value != null)
                                main_1.default.sceneManager.scene.showMenu();
                        }
                        break;
                    }
                    case "hideMenu": {
                        if (main_1.default.currentUser == null)
                            return;
                        if (main_1.default.sceneManager.scene instanceof GameScene_1.default)
                            main_1.default.sceneManager.scene.hideMenu();
                        break;
                    }
                    case "chatMessage": {
                        if (main_1.default.currentUser == null)
                            return;
                        if (main_1.default.sceneManager.scene instanceof GameScene_1.default)
                            main_1.default.sceneManager.scene.newChat(message.value);
                        break;
                    }
                }
            };
        });
    }
    sendPing() {
        if (this.getPong == false)
            return;
        this.getPong = false;
        this.pingDate = Date.now();
        this.sendMsg("ping", this.ping);
    }
    sendMsg(key, value = null) {
        if (this.ws == null || this.ws.readyState !== WebSocket.OPEN)
            return main_1.default.logger.sendLog("ERROR", "Impossible to send message to region server, websockets are disconnect.");
        const message = JSON.stringify({ key: key, value: value });
        const compressedMessage = pako_1.default.deflate(message);
        this.ws.send(compressedMessage);
    }
    destroy() { }
}
exports["default"] = RegionServer;


/***/ }),

/***/ "./client/WebSockets/RegionServer/RegionServerManager.ts":
/*!***************************************************************!*\
  !*** ./client/WebSockets/RegionServer/RegionServerManager.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const main_1 = __importDefault(__webpack_require__(/*! ../../main */ "./client/main.ts"));
const RegionServer_1 = __importDefault(__webpack_require__(/*! ./RegionServer */ "./client/WebSockets/RegionServer/RegionServer.ts"));
class RegionServerManager {
    constructor() {
        this.regionServers = {};
    }
    getServerById(id) {
        for (let i in this.regionServers) {
            const regionServer = this.regionServers[i];
            if (regionServer.id == id)
                return regionServer;
        }
        return null;
    }
    initServer(data) {
        if (data.ip == null || this.getServerById(data.id) != null)
            return;
        const regionServer = new RegionServer_1.default(data);
        this.regionServers[regionServer.id] = regionServer;
        main_1.default.logger.sendLog("INFO", `Region server [${data.id}] loaded.`);
    }
    initAllServers() {
        return new Promise((resolve, reject) => {
            const listOfPromise = [];
            for (let i in this.regionServers) {
                listOfPromise.push(this.regionServers[i].connect());
            }
            Promise.all(listOfPromise).then(() => {
                resolve("All region servers loaded.");
            }).catch((e) => reject(e.toString()));
        });
    }
    destroyServer(id) {
        const regionServer = this.getServerById(id);
        if (regionServer == null)
            return;
        regionServer.destroy();
        delete this.regionServers[id];
        main_1.default.logger.sendLog("INFO", `Region server [${id}] unloaded.`);
    }
    getAllServers() {
        const servers = [];
        for (let i in this.regionServers) {
            const server = this.regionServers[i];
            servers.push({ id: server.id, ip: server.ip, port: server.port, ping: server.ping });
        }
        return servers.sort((a, b) => Number(a.ping) - Number(b.ping));
    }
}
exports["default"] = RegionServerManager;


/***/ }),

/***/ "./client/WebSockets/WebSocketsManager.ts":
/*!************************************************!*\
  !*** ./client/WebSockets/WebSocketsManager.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const pako_1 = __importDefault(__webpack_require__(/*! pako */ "./node_modules/pako/index.js"));
const Config_1 = __importDefault(__webpack_require__(/*! ../Config/Config */ "./client/Config/Config.ts"));
const GameScene_1 = __importDefault(__webpack_require__(/*! ../Scene/List/GameScene */ "./client/Scene/List/GameScene.ts"));
const User_1 = __importDefault(__webpack_require__(/*! ../User/User */ "./client/User/User.ts"));
const main_1 = __importDefault(__webpack_require__(/*! ../main */ "./client/main.ts"));
class WebsocketManager {
    constructor() {
        this.ws = null;
    }
    init() {
        return new Promise((resolve, reject) => {
            const instance = this;
            main_1.default.sceneManager.initScene(0 /* SceneList.MessageScene */, {
                message: main_1.default.languageManager.getValueForKey('LOADING_CONNECTION_TO_MAIN_SERVER')
            });
            this.ws = new WebSocket(`ws://${Config_1.default.SERVER_HOST}:${Config_1.default.SERVER_PORT}`);
            this.ws.onclose = () => {
                main_1.default.logger.sendLog("ERROR", "Connection to server lost.");
                main_1.default.sceneManager.initScene(0 /* SceneList.MessageScene */, {
                    message: main_1.default.languageManager.getValueForKey('GENERIC_ERROR_CONNECTION_LOST')
                });
            };
            this.ws.onopen = () => {
                main_1.default.logger.sendLog("SUCCESS", "Connected to server.");
                instance.sendMsg("fetchingServers");
                main_1.default.sceneManager.initScene(0 /* SceneList.MessageScene */, {
                    message: main_1.default.languageManager.getValueForKey('LOADING_FETCHING_REGION_SERVERS')
                });
            };
            this.ws.onmessage = (msg) => {
                if (msg == null || msg.data == null)
                    return;
                if (msg.data instanceof Blob) {
                    const reader = new FileReader();
                    reader.onload = (event) => {
                        var _a;
                        const arrayBuffer = (_a = event === null || event === void 0 ? void 0 : event.target) === null || _a === void 0 ? void 0 : _a.result;
                        // Decompress the ArrayBuffer using Pako
                        processMessage(pako_1.default.inflate(new Uint8Array(arrayBuffer), { to: 'string' }));
                    };
                    reader.readAsArrayBuffer(msg.data);
                }
                else {
                    processMessage(pako_1.default.inflate(msg.data, { to: "string" }));
                }
            };
            const processMessage = (msg) => {
                const message = JSON.parse(msg.toString());
                switch (message.key) {
                    case "getAllServers": {
                        message.value.forEach((server) => main_1.default.regionServerManager.initServer(server));
                        main_1.default.regionServerManager.initAllServers()
                            .then((message) => {
                            main_1.default.logger.sendLog("SUCCESS", message);
                            if (main_1.default.regionServerManager.getAllServers().length == 0)
                                return main_1.default.sceneManager.initScene(0 /* SceneList.MessageScene */, {
                                    message: main_1.default.languageManager.getValueForKey('GENERIC_ERROR_NO_SERVER_AVAILABLE')
                                });
                            main_1.default.sceneManager.initScene(1 /* SceneList.LoginScene */);
                        })
                            .catch((e) => {
                            main_1.default.logger.sendLog("ERROR", e.toString());
                            main_1.default.sceneManager.initScene(0 /* SceneList.MessageScene */, {
                                message: main_1.default.languageManager.getValueForKey('GENERIC_ERROR_SERVERS')
                            });
                        });
                        break;
                    }
                    case "errorLogin": {
                        main_1.default.sceneManager.initScene(1 /* SceneList.LoginScene */, {
                            error: message.value.key != null ? message.value.key : message.value,
                            args: message.value.args != null ? message.value.args : []
                        });
                        break;
                    }
                    case "disconnect": {
                        main_1.default.currentUser = null;
                        main_1.default.sceneManager.initScene(0 /* SceneList.MessageScene */, {
                            message: main_1.default.languageManager.getValueForKey(message.value.key, message.value.params)
                        });
                        break;
                    }
                    case "logged": {
                        main_1.default.currentUser = new User_1.default(message.value);
                        main_1.default.sceneManager.initScene(2 /* SceneList.GameScene */, {
                            currentUser: main_1.default.currentUser
                        });
                        break;
                    }
                    case "chatMessage": {
                        if (main_1.default.currentUser == null)
                            return;
                        if (main_1.default.sceneManager.scene instanceof GameScene_1.default)
                            main_1.default.sceneManager.scene.newChat(message.value);
                        break;
                    }
                    case "profileData": {
                        if (main_1.default.currentUser == null)
                            return;
                        if (main_1.default.sceneManager.scene instanceof GameScene_1.default)
                            main_1.default.sceneManager.scene.profileData(message.value);
                        break;
                    }
                    case "friendsData": {
                        if (main_1.default.currentUser == null)
                            return;
                        main_1.default.currentUser.friends = message.value;
                        if (main_1.default.sceneManager.scene instanceof GameScene_1.default)
                            main_1.default.sceneManager.scene.reloadFriends();
                        break;
                    }
                    case "shopData": {
                        if (main_1.default.currentUser == null)
                            return;
                        if (main_1.default.sceneManager.scene instanceof GameScene_1.default)
                            main_1.default.sceneManager.scene.shopData(message.value);
                        break;
                    }
                    case "shopItems": {
                        if (main_1.default.currentUser == null)
                            return;
                        if (main_1.default.sceneManager.scene instanceof GameScene_1.default)
                            main_1.default.sceneManager.scene.shopDataItems(message.value);
                        break;
                    }
                    case "avatarUpdate": {
                        if (main_1.default.currentUser == null)
                            return;
                        main_1.default.currentUser.avatar = message.value;
                        if (main_1.default.sceneManager.scene instanceof GameScene_1.default)
                            main_1.default.sceneManager.scene.updateAvatar();
                        break;
                    }
                    case "rankUpdate": {
                        if (main_1.default.currentUser == null)
                            return;
                        main_1.default.currentUser.rank = message.value;
                        if (main_1.default.sceneManager.scene instanceof GameScene_1.default)
                            main_1.default.sceneManager.scene.renderMenu();
                        break;
                    }
                    case "coins": {
                        if (main_1.default.currentUser == null)
                            return;
                        main_1.default.currentUser.coins = message.value;
                        break;
                    }
                    case "addItem": {
                        if (main_1.default.currentUser == null)
                            return;
                        main_1.default.currentUser.items.push(message.value);
                        if (main_1.default.sceneManager.scene instanceof GameScene_1.default)
                            main_1.default.sceneManager.scene.refreshShop();
                        break;
                    }
                    case "leaderboardData": {
                        if (main_1.default.currentUser == null)
                            return;
                        if (main_1.default.sceneManager.scene instanceof GameScene_1.default)
                            main_1.default.sceneManager.scene.setLeaderboardData(message.value);
                        break;
                    }
                    case "adminAlert": {
                        if (main_1.default.currentUser == null)
                            return;
                        if (main_1.default.sceneManager.scene instanceof GameScene_1.default)
                            main_1.default.sceneManager.scene.renderAdminAlert(message.value);
                        break;
                    }
                    case "adminData": {
                        if (main_1.default.currentUser == null)
                            return;
                        if (main_1.default.sceneManager.scene instanceof GameScene_1.default)
                            main_1.default.sceneManager.scene.renderAdmin(message.value);
                        break;
                    }
                }
            };
        });
    }
    sendMsg(key, value = null) {
        if (this.ws == null || this.ws.readyState !== WebSocket.OPEN)
            return main_1.default.logger.sendLog("ERROR", "Impossible to send message to server, websockets are disconnect.");
        const message = JSON.stringify({ key: key, value: value });
        const compressedMessage = pako_1.default.deflate(message);
        this.ws.send(compressedMessage);
    }
}
exports["default"] = WebsocketManager;


/***/ }),

/***/ "./client/main.ts":
/*!************************!*\
  !*** ./client/main.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(/*! ./Utils/Utils */ "./client/Utils/Utils.ts");
const Logger_1 = __importDefault(__webpack_require__(/*! ../shared/Logger/Logger */ "./shared/Logger/Logger.ts"));
const LanguageManager_1 = __importDefault(__webpack_require__(/*! ./Language/LanguageManager */ "./client/Language/LanguageManager.ts"));
const SceneManager_1 = __importDefault(__webpack_require__(/*! ./Scene/SceneManager */ "./client/Scene/SceneManager.ts"));
const Config_1 = __importDefault(__webpack_require__(/*! ./Config/Config */ "./client/Config/Config.ts"));
const ResourceManager_1 = __importDefault(__webpack_require__(/*! ./Ressource/ResourceManager */ "./client/Ressource/ResourceManager.ts"));
const SettingsManager_1 = __importDefault(__webpack_require__(/*! ./Settings/SettingsManager */ "./client/Settings/SettingsManager.ts"));
const WebSocketsManager_1 = __importDefault(__webpack_require__(/*! ./WebSockets/WebSocketsManager */ "./client/WebSockets/WebSocketsManager.ts"));
const RegionServerManager_1 = __importDefault(__webpack_require__(/*! ./WebSockets/RegionServer/RegionServerManager */ "./client/WebSockets/RegionServer/RegionServerManager.ts"));
const GameScene_1 = __importDefault(__webpack_require__(/*! ./Scene/List/GameScene */ "./client/Scene/List/GameScene.ts"));
let Application;
class App {
    constructor() {
        this.logger = new Logger_1.default();
        this.languageManager = new LanguageManager_1.default();
        this.sceneManager = new SceneManager_1.default();
        this.resourceManager = new ResourceManager_1.default();
        this.webSocketsManager = new WebSocketsManager_1.default();
        this.regionServerManager = new RegionServerManager_1.default();
        this.settingsManager = new SettingsManager_1.default();
        this.currentUser = null;
        this.lastCall = performance.now();
        this.elapsed = 0; // Initialize elapsed to 0
        this.elapsedThen = performance.now(); // Corrected variable name
        window.requestAnimationFrame(this.update.bind(this));
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            this.languageManager.init();
            this.settingsManager.init();
            this.sceneManager.initScene(0 /* SceneList.MessageScene */, {
                message: Application.languageManager.getValueForKey('LOADING_MESSAGE', [Config_1.default.NAME])
            });
            let messageLoading = yield this.resourceManager.init();
            Application.logger.sendLog("SUCCESS", messageLoading);
            yield this.webSocketsManager.init();
        });
    }
    update() {
        const now = performance.now();
        this.elapsed = now - this.elapsedThen;
        if (this.settingsManager.graphics.fps != 0 && this.elapsed < (1000 / this.settingsManager.graphics.fps)) {
            window.requestAnimationFrame(this.update.bind(this));
            return;
        }
        if (this.settingsManager.graphics.fps != 0)
            this.elapsedThen = now - (this.elapsed % (1000 / this.settingsManager.graphics.fps));
        const delta = (now - this.lastCall) / 1000;
        this.lastCall = now;
        if (this.sceneManager.scene instanceof GameScene_1.default) {
            this.sceneManager.scene.renderGame(delta);
            this.sceneManager.scene.setFps(Math.round(1 / delta));
        }
        window.requestAnimationFrame(this.update.bind(this));
    }
}
Application = new App();
exports["default"] = Application;
window.addEventListener("load", (event) => {
    Application.init().catch((e) => Application.logger.sendCriticalError(e.toString()));
});


/***/ }),

/***/ "./shared/Base/Base.ts":
/*!*****************************!*\
  !*** ./shared/Base/Base.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Base = void 0;
exports.Base = {
    hockey: {
        bg_color: 'rgb(85, 85, 85)',
        border_color: 'rgb(233,204,110)',
    },
    grass: {
        bg_color: 'rgb(113,140,90)',
        border_color: 'rgb(199,230,189)',
    },
    segment_color: 'rgb(0,0,0)',
    playerPhysics: {
        radius: 15,
        bCoef: 0.5,
        invMass: 0.5,
        damping: 0.96,
        acceleration: 0.1,
        kickingAcceleration: 0.07,
        kickingDamping: 0.96,
        kickStrength: 5,
        pos: [0, 0],
        cMask: ['all'],
        cGroup: [''],
    },
    ballPhysics: {
        radius: 10,
        bCoef: 0.5,
        invMass: 1,
        damping: 0.99,
        color: 'FFFFFF',
        pos: [0, 0],
        cMask: ['all'],
        cGroup: ['ball'],
    },
    discPhysics: {
        radius: 10,
        bCoef: 0.5,
        invMass: 0,
        damping: 0.99,
        color: 'rgb(255,255,255)',
        cMask: ['all'],
        cGroup: ['all'],
    },
    segmentPhysics: {
        curve: 0,
        bCoef: 1,
        cGroup: ['wall'],
        cMask: ['all'],
    },
    planePhysics: {
        bCoef: 1,
        cGroup: ['wall'],
        cMask: ['all'],
    },
    vertexPhysics: {
        bCoef: 1,
        cGroup: ['wall'],
        cMask: ['all'],
    },
    collisionFlags: {
        all: 63,
        ball: 1,
        blue: 4,
        blueKO: 16,
        c0: 268435456,
        c1: 536870912,
        c2: 1073741824,
        c3: -2147483648,
        kick: 64,
        red: 2,
        redKO: 8,
        score: 128,
        wall: 32,
    }
};


/***/ }),

/***/ "./shared/Color/Color.ts":
/*!*******************************!*\
  !*** ./shared/Color/Color.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = {
    ROOM_ANNOUNCEMENT: "#db8822",
    FRIEND: "#28b34d",
    ERROR: "#b92626"
};


/***/ }),

/***/ "./shared/Elo/Elo.ts":
/*!***************************!*\
  !*** ./shared/Elo/Elo.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getElo = void 0;
const getElo = function (elo) {
    switch (true) {
        case (elo > 2000):
            return { name: "GAME_ELO_CHALLENGER", value: 0 };
        case (elo > 1900):
            return { name: "GAME_ELO_CHAMPION", value: 5 };
        case (elo > 1800):
            return { name: "GAME_ELO_CHAMPION", value: 4 };
        case (elo > 1700):
            return { name: "GAME_ELO_CHAMPION", value: 3 };
        case (elo > 1600):
            return { name: "GAME_ELO_CHAMPION", value: 2 };
        case (elo > 1500):
            return { name: "GAME_ELO_CHAMPION", value: 1 };
        case (elo > 1400):
            return { name: "GAME_ELO_DIAMOND", value: 5 };
        case (elo > 1300):
            return { name: "GAME_ELO_DIAMOND", value: 4 };
        case (elo > 1200):
            return { name: "GAME_ELO_DIAMOND", value: 3 };
        case (elo > 1100):
            return { name: "GAME_ELO_DIAMOND", value: 2 };
        case (elo > 1000):
            return { name: "GAME_ELO_DIAMOND", value: 1 };
        case (elo > 900):
            return { name: "GAME_ELO_PLATINIUM", value: 5 };
        case (elo > 850):
            return { name: "GAME_ELO_PLATINIUM", value: 4 };
        case (elo > 800):
            return { name: "GAME_ELO_PLATINIUM", value: 3 };
        case (elo > 750):
            return { name: "GAME_ELO_PLATINIUM", value: 2 };
        case (elo > 700):
            return { name: "GAME_ELO_PLATINIUM", value: 1 };
        case (elo > 650):
            return { name: "GAME_ELO_GOLD", value: 5 };
        case (elo > 600):
            return { name: "GAME_ELO_GOLD", value: 4 };
        case (elo > 550):
            return { name: "GAME_ELO_GOLD", value: 3 };
        case (elo > 500):
            return { name: "GAME_ELO_GOLD", value: 2 };
        case (elo > 450):
            return { name: "GAME_ELO_GOLD", value: 1 };
        case (elo > 400):
            return { name: "GAME_ELO_BRONZE", value: 5 };
        case (elo > 350):
            return { name: "GAME_ELO_BRONZE", value: 4 };
        case (elo > 300):
            return { name: "GAME_ELO_BRONZE", value: 3 };
        case (elo > 250):
            return { name: "GAME_ELO_BRONZE", value: 2 };
        case (elo > 200):
            return { name: "GAME_ELO_BRONZE", value: 1 };
        case (elo > 150):
            return { name: "GAME_ELO_IRON", value: 5 };
        case (elo > 100):
            return { name: "GAME_ELO_IRON", value: 4 };
        case (elo > 50):
            return { name: "GAME_ELO_IRON", value: 3 };
        case (elo > 25):
            return { name: "GAME_ELO_IRON", value: 2 };
        default:
            return { name: "GAME_ELO_IRON", value: 1 };
    }
};
exports.getElo = getElo;


/***/ }),

/***/ "./shared/Level/Level.ts":
/*!*******************************!*\
  !*** ./shared/Level/Level.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getLevel = void 0;
const getLevel = function (xp) {
    return Math.floor((Math.sqrt(100 * (2 * xp + 25)) + 50) / 100);
};
exports.getLevel = getLevel;


/***/ }),

/***/ "./shared/Logger/LogLevel.ts":
/*!***********************************!*\
  !*** ./shared/Logger/LogLevel.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const LogLevel = {
    INFO: {
        level: 0,
        name: "INFO",
        bgColor: "\x1b[44m",
        bgWebColor: "#19689B"
    },
    WARNING: {
        level: 0,
        name: "WARNING",
        bgColor: "\x1b[43m",
        bgWebColor: "#CF7E0F"
    },
    ERROR: {
        level: 0,
        name: "ERROR",
        bgColor: "\x1b[41m",
        bgWebColor: "#AF1B1B"
    },
    CRITICAL_ERROR: {
        level: 0,
        name: "CRITICAL ERROR",
        bgColor: "\x1b[41m",
        bgWebColor: "#AF1B1B"
    },
    SUCCESS: {
        level: 0,
        name: "SUCCESS",
        bgColor: "\x1b[42m",
        bgWebColor: "#167C43"
    },
    DEBUG: {
        level: 1,
        name: "DEBUG",
        bgColor: "\x1b[46m",
        bgWebColor: "#951D8A"
    },
    VERBOSE: {
        level: 2,
        name: "VERBOSE",
        bgColor: "\x1b[45m",
        bgWebColor: "#918D12"
    }
};
exports["default"] = LogLevel;


/***/ }),

/***/ "./shared/Logger/Logger.ts":
/*!*********************************!*\
  !*** ./shared/Logger/Logger.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const LogLevel_1 = __importDefault(__webpack_require__(/*! ./LogLevel */ "./shared/Logger/LogLevel.ts"));
class Logger {
    sendLog(logKey, message) {
        if (typeof window === 'undefined')
            console.log(LogLevel_1.default[logKey].bgColor, LogLevel_1.default[logKey].name, "\x1b[0m", message);
        else
            console.log(`%c ${LogLevel_1.default[logKey].name} %c ${message}`, `background-color: ${LogLevel_1.default[logKey].bgWebColor}; color: #FFF; font-weight: bold`, `background-color: inherit; color: inherit`);
    }
    sendCriticalError(message) {
        this.sendLog("CRITICAL_ERROR", message);
        if (typeof window === 'undefined')
            process.exit;
    }
}
exports["default"] = Logger;


/***/ }),

/***/ "./shared/RoomState/RoomState.ts":
/*!***************************************!*\
  !*** ./shared/RoomState/RoomState.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RoomState = void 0;
var RoomState;
(function (RoomState) {
    RoomState[RoomState["KICK_OFF_RESET"] = 0] = "KICK_OFF_RESET";
    RoomState[RoomState["PAUSE"] = 1] = "PAUSE";
    RoomState[RoomState["UNPAUSE"] = 2] = "UNPAUSE";
    RoomState[RoomState["PLAY"] = 3] = "PLAY";
    RoomState[RoomState["GOAL_SCORE"] = 4] = "GOAL_SCORE";
    RoomState[RoomState["GAME_ENDED"] = 5] = "GAME_ENDED";
})(RoomState || (exports.RoomState = RoomState = {}));


/***/ }),

/***/ "./shared/ShareableData/ShareableData.ts":
/*!***********************************************!*\
  !*** ./shared/ShareableData/ShareableData.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
class ShareableData {
    constructor(ts, p) {
        this.timestamp = ts;
        this.shareableData = p;
    }
}
exports["default"] = ShareableData;


/***/ }),

/***/ "./shared/Team/Team.ts":
/*!*****************************!*\
  !*** ./shared/Team/Team.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const Team = {
    SPECTATORS: {
        id: 0,
        name: "spectators",
        color: '#FFF',
        cGroup: 0,
    },
    RED: {
        id: 1,
        name: "red",
        color: '#bd3838',
        cGroup: 2,
    },
    BLUE: {
        id: 2,
        name: "blue",
        color: '#136eac',
        cGroup: 4,
    }
};
exports["default"] = Team;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./client/main.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,